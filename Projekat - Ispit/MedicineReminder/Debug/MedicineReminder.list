
MedicineReminder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033e8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  080034f4  080034f4  000134f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035f8  080035f8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080035f8  080035f8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080035f8  080035f8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035f8  080035f8  000135f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035fc  080035fc  000135fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003600  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  20000070  08003670  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  08003670  00020124  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a3a3  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ce6  00000000  00000000  0002a43c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009a8  00000000  00000000  0002c128  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008d8  00000000  00000000  0002cad0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001780d  00000000  00000000  0002d3a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008fa9  00000000  00000000  00044bb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00082f35  00000000  00000000  0004db5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d0a93  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029a0  00000000  00000000  000d0b10  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080034dc 	.word	0x080034dc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080034dc 	.word	0x080034dc

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 800015c:	b5b0      	push	{r4, r5, r7, lr}
 800015e:	b08a      	sub	sp, #40	; 0x28
 8000160:	af00      	add	r7, sp, #0
 8000162:	60f8      	str	r0, [r7, #12]
 8000164:	60b9      	str	r1, [r7, #8]
 8000166:	607a      	str	r2, [r7, #4]
 8000168:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 800016a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800016e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 8000172:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000176:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 8000178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800017a:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 800017c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800017e:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8000180:	683b      	ldr	r3, [r7, #0]
 8000182:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8000188:	68bb      	ldr	r3, [r7, #8]
 800018a:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 800018c:	f107 0310 	add.w	r3, r7, #16
 8000190:	4618      	mov	r0, r3
 8000192:	f000 f80e 	bl	80001b2 <Lcd_init>

	return lcd;
 8000196:	68fb      	ldr	r3, [r7, #12]
 8000198:	461d      	mov	r5, r3
 800019a:	f107 0410 	add.w	r4, r7, #16
 800019e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80001a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80001a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80001a6:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80001aa:	68f8      	ldr	r0, [r7, #12]
 80001ac:	3728      	adds	r7, #40	; 0x28
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bdb0      	pop	{r4, r5, r7, pc}

080001b2 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 80001b2:	b580      	push	{r7, lr}
 80001b4:	b082      	sub	sp, #8
 80001b6:	af00      	add	r7, sp, #0
 80001b8:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	7d9b      	ldrb	r3, [r3, #22]
 80001be:	2b00      	cmp	r3, #0
 80001c0:	d10c      	bne.n	80001dc <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 80001c2:	2133      	movs	r1, #51	; 0x33
 80001c4:	6878      	ldr	r0, [r7, #4]
 80001c6:	f000 f856 	bl	8000276 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 80001ca:	2132      	movs	r1, #50	; 0x32
 80001cc:	6878      	ldr	r0, [r7, #4]
 80001ce:	f000 f852 	bl	8000276 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 80001d2:	2128      	movs	r1, #40	; 0x28
 80001d4:	6878      	ldr	r0, [r7, #4]
 80001d6:	f000 f84e 	bl	8000276 <lcd_write_command>
 80001da:	e003      	b.n	80001e4 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 80001dc:	2138      	movs	r1, #56	; 0x38
 80001de:	6878      	ldr	r0, [r7, #4]
 80001e0:	f000 f849 	bl	8000276 <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 80001e4:	2101      	movs	r1, #1
 80001e6:	6878      	ldr	r0, [r7, #4]
 80001e8:	f000 f845 	bl	8000276 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 80001ec:	210c      	movs	r1, #12
 80001ee:	6878      	ldr	r0, [r7, #4]
 80001f0:	f000 f841 	bl	8000276 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 80001f4:	2106      	movs	r1, #6
 80001f6:	6878      	ldr	r0, [r7, #4]
 80001f8:	f000 f83d 	bl	8000276 <lcd_write_command>
}
 80001fc:	bf00      	nop
 80001fe:	3708      	adds	r7, #8
 8000200:	46bd      	mov	sp, r7
 8000202:	bd80      	pop	{r7, pc}

08000204 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8000204:	b590      	push	{r4, r7, lr}
 8000206:	b085      	sub	sp, #20
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
 800020c:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 800020e:	2300      	movs	r3, #0
 8000210:	73fb      	strb	r3, [r7, #15]
 8000212:	e00a      	b.n	800022a <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8000214:	7bfb      	ldrb	r3, [r7, #15]
 8000216:	683a      	ldr	r2, [r7, #0]
 8000218:	4413      	add	r3, r2
 800021a:	781b      	ldrb	r3, [r3, #0]
 800021c:	4619      	mov	r1, r3
 800021e:	6878      	ldr	r0, [r7, #4]
 8000220:	f000 f857 	bl	80002d2 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8000224:	7bfb      	ldrb	r3, [r7, #15]
 8000226:	3301      	adds	r3, #1
 8000228:	73fb      	strb	r3, [r7, #15]
 800022a:	7bfc      	ldrb	r4, [r7, #15]
 800022c:	6838      	ldr	r0, [r7, #0]
 800022e:	f7ff ff8d 	bl	800014c <strlen>
 8000232:	4603      	mov	r3, r0
 8000234:	429c      	cmp	r4, r3
 8000236:	d3ed      	bcc.n	8000214 <Lcd_string+0x10>
	}
}
 8000238:	bf00      	nop
 800023a:	3714      	adds	r7, #20
 800023c:	46bd      	mov	sp, r7
 800023e:	bd90      	pop	{r4, r7, pc}

08000240 <Lcd_clear>:
}

/**
 * Clear the screen
 */
void Lcd_clear(Lcd_HandleTypeDef * lcd) {
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 8000248:	2101      	movs	r1, #1
 800024a:	6878      	ldr	r0, [r7, #4]
 800024c:	f000 f813 	bl	8000276 <lcd_write_command>
}
 8000250:	bf00      	nop
 8000252:	3708      	adds	r7, #8
 8000254:	46bd      	mov	sp, r7
 8000256:	bd80      	pop	{r7, pc}

08000258 <Lcd_send_command>:
	}

}

void Lcd_send_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
 8000260:	460b      	mov	r3, r1
 8000262:	70fb      	strb	r3, [r7, #3]
	lcd_write_command(lcd, command);
 8000264:	78fb      	ldrb	r3, [r7, #3]
 8000266:	4619      	mov	r1, r3
 8000268:	6878      	ldr	r0, [r7, #4]
 800026a:	f000 f804 	bl	8000276 <lcd_write_command>
}
 800026e:	bf00      	nop
 8000270:	3708      	adds	r7, #8
 8000272:	46bd      	mov	sp, r7
 8000274:	bd80      	pop	{r7, pc}

08000276 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 8000276:	b580      	push	{r7, lr}
 8000278:	b082      	sub	sp, #8
 800027a:	af00      	add	r7, sp, #0
 800027c:	6078      	str	r0, [r7, #4]
 800027e:	460b      	mov	r3, r1
 8000280:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	6898      	ldr	r0, [r3, #8]
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	899b      	ldrh	r3, [r3, #12]
 800028a:	2200      	movs	r2, #0
 800028c:	4619      	mov	r1, r3
 800028e:	f001 f80e 	bl	80012ae <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	7d9b      	ldrb	r3, [r3, #22]
 8000296:	2b00      	cmp	r3, #0
 8000298:	d111      	bne.n	80002be <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 800029a:	78fb      	ldrb	r3, [r7, #3]
 800029c:	091b      	lsrs	r3, r3, #4
 800029e:	b2db      	uxtb	r3, r3
 80002a0:	2204      	movs	r2, #4
 80002a2:	4619      	mov	r1, r3
 80002a4:	6878      	ldr	r0, [r7, #4]
 80002a6:	f000 f842 	bl	800032e <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 80002aa:	78fb      	ldrb	r3, [r7, #3]
 80002ac:	f003 030f 	and.w	r3, r3, #15
 80002b0:	b2db      	uxtb	r3, r3
 80002b2:	2204      	movs	r2, #4
 80002b4:	4619      	mov	r1, r3
 80002b6:	6878      	ldr	r0, [r7, #4]
 80002b8:	f000 f839 	bl	800032e <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 80002bc:	e005      	b.n	80002ca <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 80002be:	78fb      	ldrb	r3, [r7, #3]
 80002c0:	2208      	movs	r2, #8
 80002c2:	4619      	mov	r1, r3
 80002c4:	6878      	ldr	r0, [r7, #4]
 80002c6:	f000 f832 	bl	800032e <lcd_write>
}
 80002ca:	bf00      	nop
 80002cc:	3708      	adds	r7, #8
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}

080002d2 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 80002d2:	b580      	push	{r7, lr}
 80002d4:	b082      	sub	sp, #8
 80002d6:	af00      	add	r7, sp, #0
 80002d8:	6078      	str	r0, [r7, #4]
 80002da:	460b      	mov	r3, r1
 80002dc:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	6898      	ldr	r0, [r3, #8]
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	899b      	ldrh	r3, [r3, #12]
 80002e6:	2201      	movs	r2, #1
 80002e8:	4619      	mov	r1, r3
 80002ea:	f000 ffe0 	bl	80012ae <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	7d9b      	ldrb	r3, [r3, #22]
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d111      	bne.n	800031a <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 80002f6:	78fb      	ldrb	r3, [r7, #3]
 80002f8:	091b      	lsrs	r3, r3, #4
 80002fa:	b2db      	uxtb	r3, r3
 80002fc:	2204      	movs	r2, #4
 80002fe:	4619      	mov	r1, r3
 8000300:	6878      	ldr	r0, [r7, #4]
 8000302:	f000 f814 	bl	800032e <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 8000306:	78fb      	ldrb	r3, [r7, #3]
 8000308:	f003 030f 	and.w	r3, r3, #15
 800030c:	b2db      	uxtb	r3, r3
 800030e:	2204      	movs	r2, #4
 8000310:	4619      	mov	r1, r3
 8000312:	6878      	ldr	r0, [r7, #4]
 8000314:	f000 f80b 	bl	800032e <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 8000318:	e005      	b.n	8000326 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 800031a:	78fb      	ldrb	r3, [r7, #3]
 800031c:	2208      	movs	r2, #8
 800031e:	4619      	mov	r1, r3
 8000320:	6878      	ldr	r0, [r7, #4]
 8000322:	f000 f804 	bl	800032e <lcd_write>
}
 8000326:	bf00      	nop
 8000328:	3708      	adds	r7, #8
 800032a:	46bd      	mov	sp, r7
 800032c:	bd80      	pop	{r7, pc}

0800032e <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 800032e:	b580      	push	{r7, lr}
 8000330:	b084      	sub	sp, #16
 8000332:	af00      	add	r7, sp, #0
 8000334:	6078      	str	r0, [r7, #4]
 8000336:	460b      	mov	r3, r1
 8000338:	70fb      	strb	r3, [r7, #3]
 800033a:	4613      	mov	r3, r2
 800033c:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 800033e:	2300      	movs	r3, #0
 8000340:	73fb      	strb	r3, [r7, #15]
 8000342:	e019      	b.n	8000378 <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	681a      	ldr	r2, [r3, #0]
 8000348:	7bfb      	ldrb	r3, [r7, #15]
 800034a:	009b      	lsls	r3, r3, #2
 800034c:	4413      	add	r3, r2
 800034e:	6818      	ldr	r0, [r3, #0]
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	685a      	ldr	r2, [r3, #4]
 8000354:	7bfb      	ldrb	r3, [r7, #15]
 8000356:	005b      	lsls	r3, r3, #1
 8000358:	4413      	add	r3, r2
 800035a:	8819      	ldrh	r1, [r3, #0]
 800035c:	78fa      	ldrb	r2, [r7, #3]
 800035e:	7bfb      	ldrb	r3, [r7, #15]
 8000360:	fa42 f303 	asr.w	r3, r2, r3
 8000364:	b2db      	uxtb	r3, r3
 8000366:	f003 0301 	and.w	r3, r3, #1
 800036a:	b2db      	uxtb	r3, r3
 800036c:	461a      	mov	r2, r3
 800036e:	f000 ff9e 	bl	80012ae <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8000372:	7bfb      	ldrb	r3, [r7, #15]
 8000374:	3301      	adds	r3, #1
 8000376:	73fb      	strb	r3, [r7, #15]
 8000378:	7bfa      	ldrb	r2, [r7, #15]
 800037a:	78bb      	ldrb	r3, [r7, #2]
 800037c:	429a      	cmp	r2, r3
 800037e:	d3e1      	bcc.n	8000344 <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	6918      	ldr	r0, [r3, #16]
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	8a9b      	ldrh	r3, [r3, #20]
 8000388:	2201      	movs	r2, #1
 800038a:	4619      	mov	r1, r3
 800038c:	f000 ff8f 	bl	80012ae <HAL_GPIO_WritePin>
	DELAY(1);
 8000390:	2001      	movs	r0, #1
 8000392:	f000 fd1d 	bl	8000dd0 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	6918      	ldr	r0, [r3, #16]
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	8a9b      	ldrh	r3, [r3, #20]
 800039e:	2200      	movs	r2, #0
 80003a0:	4619      	mov	r1, r3
 80003a2:	f000 ff84 	bl	80012ae <HAL_GPIO_WritePin>
}
 80003a6:	bf00      	nop
 80003a8:	3710      	adds	r7, #16
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}
	...

080003b0 <set_time>:

AlarmTime currentTime;

//inicijalizacija datuma i vremena
void set_time (void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b082      	sub	sp, #8
 80003b4:	af00      	add	r7, sp, #0
	  RTC_TimeTypeDef sTime;
	  RTC_DateTypeDef sDate;
    /**Initialize RTC and set the Time and Date
    */
  sTime.Hours = 0x17;
 80003b6:	2317      	movs	r3, #23
 80003b8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x48;
 80003ba:	2348      	movs	r3, #72	; 0x48
 80003bc:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x00;
 80003be:	2300      	movs	r3, #0
 80003c0:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80003c2:	1d3b      	adds	r3, r7, #4
 80003c4:	2201      	movs	r2, #1
 80003c6:	4619      	mov	r1, r3
 80003c8:	4812      	ldr	r0, [pc, #72]	; (8000414 <set_time+0x64>)
 80003ca:	f001 fef1 	bl	80021b0 <HAL_RTC_SetTime>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d001      	beq.n	80003d8 <set_time+0x28>
  {
	  Error_Handler();
 80003d4:	f000 fb6a 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 3 */

  /* USER CODE END RTC_Init 3 */

  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 80003d8:	2300      	movs	r3, #0
 80003da:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_FEBRUARY;
 80003dc:	2302      	movs	r3, #2
 80003de:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x13;
 80003e0:	2313      	movs	r3, #19
 80003e2:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x22;
 80003e4:	2322      	movs	r3, #34	; 0x22
 80003e6:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80003e8:	463b      	mov	r3, r7
 80003ea:	2201      	movs	r2, #1
 80003ec:	4619      	mov	r1, r3
 80003ee:	4809      	ldr	r0, [pc, #36]	; (8000414 <set_time+0x64>)
 80003f0:	f002 f84e 	bl	8002490 <HAL_RTC_SetDate>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <set_time+0x4e>
  {
	  Error_Handler();
 80003fa:	f000 fb57 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 4 */

  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);  // backup register
 80003fe:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8000402:	2101      	movs	r1, #1
 8000404:	4803      	ldr	r0, [pc, #12]	; (8000414 <set_time+0x64>)
 8000406:	f002 fbef 	bl	8002be8 <HAL_RTCEx_BKUPWrite>

  /* USER CODE END RTC_Init 4 */
}
 800040a:	bf00      	nop
 800040c:	3708      	adds	r7, #8
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	200000ec 	.word	0x200000ec

08000418 <get_time>:

//funkcija za kreiranje stringova za vreme i datum, koji se prikazuju na lcd-u
void get_time(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b084      	sub	sp, #16
 800041c:	af02      	add	r7, sp, #8
  RTC_DateTypeDef gDate;
  RTC_TimeTypeDef gTime;

  /* Get the RTC current Time */
  HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 800041e:	463b      	mov	r3, r7
 8000420:	2200      	movs	r2, #0
 8000422:	4619      	mov	r1, r3
 8000424:	4815      	ldr	r0, [pc, #84]	; (800047c <get_time+0x64>)
 8000426:	f001 ff5b 	bl	80022e0 <HAL_RTC_GetTime>
  /* Get the RTC current Date */
  HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 800042a:	1d3b      	adds	r3, r7, #4
 800042c:	2200      	movs	r2, #0
 800042e:	4619      	mov	r1, r3
 8000430:	4812      	ldr	r0, [pc, #72]	; (800047c <get_time+0x64>)
 8000432:	f002 f8e3 	bl	80025fc <HAL_RTC_GetDate>


  currentTime.Hour = gTime.Hours;
 8000436:	783a      	ldrb	r2, [r7, #0]
 8000438:	4b11      	ldr	r3, [pc, #68]	; (8000480 <get_time+0x68>)
 800043a:	701a      	strb	r2, [r3, #0]
  currentTime.Min = gTime.Minutes;
 800043c:	787a      	ldrb	r2, [r7, #1]
 800043e:	4b10      	ldr	r3, [pc, #64]	; (8000480 <get_time+0x68>)
 8000440:	705a      	strb	r2, [r3, #1]
  /* Display time Format: hh:mm:ss */
  sprintf((char*)time,"%02d:%02d:%02d",gTime.Hours, gTime.Minutes, gTime.Seconds);
 8000442:	783b      	ldrb	r3, [r7, #0]
 8000444:	461a      	mov	r2, r3
 8000446:	787b      	ldrb	r3, [r7, #1]
 8000448:	4619      	mov	r1, r3
 800044a:	78bb      	ldrb	r3, [r7, #2]
 800044c:	9300      	str	r3, [sp, #0]
 800044e:	460b      	mov	r3, r1
 8000450:	490c      	ldr	r1, [pc, #48]	; (8000484 <get_time+0x6c>)
 8000452:	480d      	ldr	r0, [pc, #52]	; (8000488 <get_time+0x70>)
 8000454:	f002 fc30 	bl	8002cb8 <siprintf>

  /* Display date Format: mm-dd-yy */
  sprintf((char*)date,"%02d-%02d-%2d",gDate.Date, gDate.Month, 2000 + gDate.Year);
 8000458:	79bb      	ldrb	r3, [r7, #6]
 800045a:	461a      	mov	r2, r3
 800045c:	797b      	ldrb	r3, [r7, #5]
 800045e:	4619      	mov	r1, r3
 8000460:	79fb      	ldrb	r3, [r7, #7]
 8000462:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000466:	9300      	str	r3, [sp, #0]
 8000468:	460b      	mov	r3, r1
 800046a:	4908      	ldr	r1, [pc, #32]	; (800048c <get_time+0x74>)
 800046c:	4808      	ldr	r0, [pc, #32]	; (8000490 <get_time+0x78>)
 800046e:	f002 fc23 	bl	8002cb8 <siprintf>
}
 8000472:	bf00      	nop
 8000474:	3708      	adds	r7, #8
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	200000ec 	.word	0x200000ec
 8000480:	20000118 	.word	0x20000118
 8000484:	080034f4 	.word	0x080034f4
 8000488:	20000100 	.word	0x20000100
 800048c:	08003504 	.word	0x08003504
 8000490:	2000010c 	.word	0x2000010c

08000494 <display_time>:

//funkcija za prikaz vremena na lcd-u
void display_time (Lcd_HandleTypeDef *lcd)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
	Lcd_send_command (lcd, 0x80);
 800049c:	2180      	movs	r1, #128	; 0x80
 800049e:	6878      	ldr	r0, [r7, #4]
 80004a0:	f7ff feda 	bl	8000258 <Lcd_send_command>
	Lcd_string (lcd, "TIME: ");
 80004a4:	490b      	ldr	r1, [pc, #44]	; (80004d4 <display_time+0x40>)
 80004a6:	6878      	ldr	r0, [r7, #4]
 80004a8:	f7ff feac 	bl	8000204 <Lcd_string>
	Lcd_string (lcd, time);
 80004ac:	490a      	ldr	r1, [pc, #40]	; (80004d8 <display_time+0x44>)
 80004ae:	6878      	ldr	r0, [r7, #4]
 80004b0:	f7ff fea8 	bl	8000204 <Lcd_string>
	Lcd_send_command (lcd, 0xc0);
 80004b4:	21c0      	movs	r1, #192	; 0xc0
 80004b6:	6878      	ldr	r0, [r7, #4]
 80004b8:	f7ff fece 	bl	8000258 <Lcd_send_command>
	Lcd_string (lcd, "DATE: ");
 80004bc:	4907      	ldr	r1, [pc, #28]	; (80004dc <display_time+0x48>)
 80004be:	6878      	ldr	r0, [r7, #4]
 80004c0:	f7ff fea0 	bl	8000204 <Lcd_string>
	Lcd_string (lcd, date);
 80004c4:	4906      	ldr	r1, [pc, #24]	; (80004e0 <display_time+0x4c>)
 80004c6:	6878      	ldr	r0, [r7, #4]
 80004c8:	f7ff fe9c 	bl	8000204 <Lcd_string>
}
 80004cc:	bf00      	nop
 80004ce:	3708      	adds	r7, #8
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	08003514 	.word	0x08003514
 80004d8:	20000100 	.word	0x20000100
 80004dc:	0800351c 	.word	0x0800351c
 80004e0:	2000010c 	.word	0x2000010c

080004e4 <beep>:

//funkcija za treperenje led diode prilikom aktivacije alarma
void beep(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, ALARM_LED, GPIO_PIN_RESET);
 80004e8:	2200      	movs	r2, #0
 80004ea:	2110      	movs	r1, #16
 80004ec:	480f      	ldr	r0, [pc, #60]	; (800052c <beep+0x48>)
 80004ee:	f000 fede 	bl	80012ae <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80004f2:	20c8      	movs	r0, #200	; 0xc8
 80004f4:	f000 fc6c 	bl	8000dd0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, ALARM_LED, GPIO_PIN_SET);
 80004f8:	2201      	movs	r2, #1
 80004fa:	2110      	movs	r1, #16
 80004fc:	480b      	ldr	r0, [pc, #44]	; (800052c <beep+0x48>)
 80004fe:	f000 fed6 	bl	80012ae <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000502:	2064      	movs	r0, #100	; 0x64
 8000504:	f000 fc64 	bl	8000dd0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, ALARM_LED, GPIO_PIN_RESET);
 8000508:	2200      	movs	r2, #0
 800050a:	2110      	movs	r1, #16
 800050c:	4807      	ldr	r0, [pc, #28]	; (800052c <beep+0x48>)
 800050e:	f000 fece 	bl	80012ae <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8000512:	20c8      	movs	r0, #200	; 0xc8
 8000514:	f000 fc5c 	bl	8000dd0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, ALARM_LED, GPIO_PIN_SET);
 8000518:	2201      	movs	r2, #1
 800051a:	2110      	movs	r1, #16
 800051c:	4803      	ldr	r0, [pc, #12]	; (800052c <beep+0x48>)
 800051e:	f000 fec6 	bl	80012ae <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000522:	2064      	movs	r0, #100	; 0x64
 8000524:	f000 fc54 	bl	8000dd0 <HAL_Delay>
}
 8000528:	bf00      	nop
 800052a:	bd80      	pop	{r7, pc}
 800052c:	40010800 	.word	0x40010800

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b590      	push	{r4, r7, lr}
 8000532:	b0ab      	sub	sp, #172	; 0xac
 8000534:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	AlarmTime medicineReminders[MAX_REMINDERS];
	int medicineRemindersCount = 0;
 8000536:	2300      	movs	r3, #0
 8000538:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

	char reminderName[30];
	char reminderTime[30];
	AlarmTime tempTime;

	int hourIndicator = 1;
 800053c:	2301      	movs	r3, #1
 800053e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	int minIndicator = -1;
 8000542:	f04f 33ff 	mov.w	r3, #4294967295
 8000546:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054a:	f000 fbdf 	bl	8000d0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054e:	f000 f977 	bl	8000840 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000552:	f000 fa41 	bl	80009d8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000556:	f000 f9c7 	bl	80008e8 <MX_I2C1_Init>
  MX_RTC_Init();
 800055a:	f000 f9f3 	bl	8000944 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  Lcd_PortType ports[] = {
 800055e:	4bae      	ldr	r3, [pc, #696]	; (8000818 <main+0x2e8>)
 8000560:	f107 0420 	add.w	r4, r7, #32
 8000564:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000566:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  	  GPIOB, GPIOB, GPIOB, GPIOB
  };

  Lcd_PinType pins[] = {
 800056a:	4aac      	ldr	r2, [pc, #688]	; (800081c <main+0x2ec>)
 800056c:	f107 0318 	add.w	r3, r7, #24
 8000570:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000574:	e883 0003 	stmia.w	r3, {r0, r1}
  	  GPIO_PIN_4, GPIO_PIN_5, GPIO_PIN_6, GPIO_PIN_7
  };

  Lcd_HandleTypeDef lcd = Lcd_create(ports, pins, GPIOB, GPIO_PIN_1, GPIOB, GPIO_PIN_3, LCD_4_BIT_MODE);
 8000578:	4638      	mov	r0, r7
 800057a:	f107 0218 	add.w	r2, r7, #24
 800057e:	f107 0120 	add.w	r1, r7, #32
 8000582:	2300      	movs	r3, #0
 8000584:	9303      	str	r3, [sp, #12]
 8000586:	2308      	movs	r3, #8
 8000588:	9302      	str	r3, [sp, #8]
 800058a:	4ba5      	ldr	r3, [pc, #660]	; (8000820 <main+0x2f0>)
 800058c:	9301      	str	r3, [sp, #4]
 800058e:	2302      	movs	r3, #2
 8000590:	9300      	str	r3, [sp, #0]
 8000592:	4ba3      	ldr	r3, [pc, #652]	; (8000820 <main+0x2f0>)
 8000594:	f7ff fde2 	bl	800015c <Lcd_create>

  if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x32F2)
 8000598:	2101      	movs	r1, #1
 800059a:	48a2      	ldr	r0, [pc, #648]	; (8000824 <main+0x2f4>)
 800059c:	f002 fb3e 	bl	8002c1c <HAL_RTCEx_BKUPRead>
 80005a0:	4602      	mov	r2, r0
 80005a2:	f243 23f2 	movw	r3, #13042	; 0x32f2
 80005a6:	429a      	cmp	r2, r3
 80005a8:	d001      	beq.n	80005ae <main+0x7e>
  {
	//inicijalizacija vremena i datuma
	set_time();
 80005aa:	f7ff ff01 	bl	80003b0 <set_time>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /* USER CODE BEGIN 3 */
	  //ucitaj trenutno vreme i datum
	  get_time();
 80005ae:	f7ff ff33 	bl	8000418 <get_time>
	  //prikazi trenutno vreme i datum
	  display_time(&lcd);
 80005b2:	463b      	mov	r3, r7
 80005b4:	4618      	mov	r0, r3
 80005b6:	f7ff ff6d 	bl	8000494 <display_time>

	  //provera da li postoji neki alarm u ovo vreme
	  for(i=0; i<medicineRemindersCount; i++){
 80005ba:	2300      	movs	r3, #0
 80005bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80005c0:	e05d      	b.n	800067e <main+0x14e>
		  if(medicineReminders[i].Hour == currentTime.Hour
 80005c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80005c6:	005b      	lsls	r3, r3, #1
 80005c8:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80005cc:	4413      	add	r3, r2
 80005ce:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 80005d2:	4b95      	ldr	r3, [pc, #596]	; (8000828 <main+0x2f8>)
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	429a      	cmp	r2, r3
 80005d8:	d14c      	bne.n	8000674 <main+0x144>
			&& medicineReminders[i].Min == currentTime.Min){
 80005da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80005de:	005b      	lsls	r3, r3, #1
 80005e0:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80005e4:	4413      	add	r3, r2
 80005e6:	f813 2c23 	ldrb.w	r2, [r3, #-35]
 80005ea:	4b8f      	ldr	r3, [pc, #572]	; (8000828 <main+0x2f8>)
 80005ec:	785b      	ldrb	r3, [r3, #1]
 80005ee:	429a      	cmp	r2, r3
 80005f0:	d140      	bne.n	8000674 <main+0x144>
			  Lcd_clear(&lcd);
 80005f2:	463b      	mov	r3, r7
 80005f4:	4618      	mov	r0, r3
 80005f6:	f7ff fe23 	bl	8000240 <Lcd_clear>

			  Lcd_send_command(&lcd, 0x80);
 80005fa:	463b      	mov	r3, r7
 80005fc:	2180      	movs	r1, #128	; 0x80
 80005fe:	4618      	mov	r0, r3
 8000600:	f7ff fe2a 	bl	8000258 <Lcd_send_command>
			  sprintf((char*)reminderName,"TAKE MEDICINE %02d", i + 1);
 8000604:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000608:	1c5a      	adds	r2, r3, #1
 800060a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800060e:	4987      	ldr	r1, [pc, #540]	; (800082c <main+0x2fc>)
 8000610:	4618      	mov	r0, r3
 8000612:	f002 fb51 	bl	8002cb8 <siprintf>
			  Lcd_string(&lcd, reminderName);
 8000616:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800061a:	463b      	mov	r3, r7
 800061c:	4611      	mov	r1, r2
 800061e:	4618      	mov	r0, r3
 8000620:	f7ff fdf0 	bl	8000204 <Lcd_string>

			  Lcd_send_command(&lcd, 0xc0);
 8000624:	463b      	mov	r3, r7
 8000626:	21c0      	movs	r1, #192	; 0xc0
 8000628:	4618      	mov	r0, r3
 800062a:	f7ff fe15 	bl	8000258 <Lcd_send_command>
			  sprintf((char*)reminderTime,"ALARM TIME: %02d:%02d", medicineReminders[i].Hour, medicineReminders[i].Min);
 800062e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000632:	005b      	lsls	r3, r3, #1
 8000634:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8000638:	4413      	add	r3, r2
 800063a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800063e:	461a      	mov	r2, r3
 8000640:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000644:	005b      	lsls	r3, r3, #1
 8000646:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800064a:	440b      	add	r3, r1
 800064c:	f813 3c23 	ldrb.w	r3, [r3, #-35]
 8000650:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8000654:	4976      	ldr	r1, [pc, #472]	; (8000830 <main+0x300>)
 8000656:	f002 fb2f 	bl	8002cb8 <siprintf>
			  Lcd_string(&lcd, reminderTime);
 800065a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800065e:	463b      	mov	r3, r7
 8000660:	4611      	mov	r1, r2
 8000662:	4618      	mov	r0, r3
 8000664:	f7ff fdce 	bl	8000204 <Lcd_string>

			  beep();
 8000668:	f7ff ff3c 	bl	80004e4 <beep>
			  beep();
 800066c:	f7ff ff3a 	bl	80004e4 <beep>
			  beep();
 8000670:	f7ff ff38 	bl	80004e4 <beep>
	  for(i=0; i<medicineRemindersCount; i++){
 8000674:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000678:	3301      	adds	r3, #1
 800067a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800067e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8000682:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000686:	429a      	cmp	r2, r3
 8000688:	db9b      	blt.n	80005c2 <main+0x92>
		  }
	  }
	  HAL_Delay(300);
 800068a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800068e:	f000 fb9f 	bl	8000dd0 <HAL_Delay>

	  //provera da li je pritisnuto dugme za podesavanje alarma
	  if(HAL_GPIO_ReadPin(GPIOA, SET_MAD) == 0){
 8000692:	2102      	movs	r1, #2
 8000694:	4867      	ldr	r0, [pc, #412]	; (8000834 <main+0x304>)
 8000696:	f000 fdf3 	bl	8001280 <HAL_GPIO_ReadPin>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d186      	bne.n	80005ae <main+0x7e>
		  while(HAL_GPIO_ReadPin(GPIOA, SET_MAD) == 0);
 80006a0:	bf00      	nop
 80006a2:	2102      	movs	r1, #2
 80006a4:	4863      	ldr	r0, [pc, #396]	; (8000834 <main+0x304>)
 80006a6:	f000 fdeb 	bl	8001280 <HAL_GPIO_ReadPin>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d0f8      	beq.n	80006a2 <main+0x172>

		  tempTime.Hour = 0x00;
 80006b0:	2300      	movs	r3, #0
 80006b2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
		  tempTime.Min = 0x00;
 80006b6:	2300      	movs	r3, #0
 80006b8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
		  i = 0;
 80006bc:	2300      	movs	r3, #0
 80006be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

		  Lcd_clear(&lcd);
 80006c2:	463b      	mov	r3, r7
 80006c4:	4618      	mov	r0, r3
 80006c6:	f7ff fdbb 	bl	8000240 <Lcd_clear>

		  //dok god ne pritisnemo opet dugme da potvrdimo unete alarme ili dok nije dostignut max broj alarma
		  //podesavamo alarme
		  while(HAL_GPIO_ReadPin(GPIOA, SET_MAD) != 0 && i < MAX_REMINDERS) {
 80006ca:	e094      	b.n	80007f6 <main+0x2c6>
			  Lcd_send_command(&lcd, 0x80);
 80006cc:	463b      	mov	r3, r7
 80006ce:	2180      	movs	r1, #128	; 0x80
 80006d0:	4618      	mov	r0, r3
 80006d2:	f7ff fdc1 	bl	8000258 <Lcd_send_command>
			  sprintf((char*)reminderName,"REMINDER %02d", i + 1);
 80006d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80006da:	1c5a      	adds	r2, r3, #1
 80006dc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80006e0:	4955      	ldr	r1, [pc, #340]	; (8000838 <main+0x308>)
 80006e2:	4618      	mov	r0, r3
 80006e4:	f002 fae8 	bl	8002cb8 <siprintf>
			  Lcd_string(&lcd, reminderName);
 80006e8:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80006ec:	463b      	mov	r3, r7
 80006ee:	4611      	mov	r1, r2
 80006f0:	4618      	mov	r0, r3
 80006f2:	f7ff fd87 	bl	8000204 <Lcd_string>

			  Lcd_send_command(&lcd, 0xc0);
 80006f6:	463b      	mov	r3, r7
 80006f8:	21c0      	movs	r1, #192	; 0xc0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f7ff fdac 	bl	8000258 <Lcd_send_command>
			  sprintf((char*)reminderTime,"%02d:%02d", tempTime.Hour, tempTime.Min);
 8000700:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000704:	461a      	mov	r2, r3
 8000706:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800070a:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800070e:	494b      	ldr	r1, [pc, #300]	; (800083c <main+0x30c>)
 8000710:	f002 fad2 	bl	8002cb8 <siprintf>
			  Lcd_string(&lcd, reminderTime);
 8000714:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000718:	463b      	mov	r3, r7
 800071a:	4611      	mov	r1, r2
 800071c:	4618      	mov	r0, r3
 800071e:	f7ff fd71 	bl	8000204 <Lcd_string>

			  //uvecanje sata ili minuta za +1
			  if(HAL_GPIO_ReadPin(GPIOA, INC) == 0){
 8000722:	2104      	movs	r1, #4
 8000724:	4843      	ldr	r0, [pc, #268]	; (8000834 <main+0x304>)
 8000726:	f000 fdab 	bl	8001280 <HAL_GPIO_ReadPin>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d126      	bne.n	800077e <main+0x24e>
				  if(hourIndicator == 1){
 8000730:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000734:	2b01      	cmp	r3, #1
 8000736:	d10d      	bne.n	8000754 <main+0x224>
					  tempTime.Hour++;
 8000738:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800073c:	3301      	adds	r3, #1
 800073e:	b2db      	uxtb	r3, r3
 8000740:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
					  if(tempTime.Hour == 0x18){
 8000744:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000748:	2b18      	cmp	r3, #24
 800074a:	d110      	bne.n	800076e <main+0x23e>
						  tempTime.Hour = 0x00;
 800074c:	2300      	movs	r3, #0
 800074e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8000752:	e00c      	b.n	800076e <main+0x23e>
					  }
				  }
				  else {
					  tempTime.Min++;
 8000754:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8000758:	3301      	adds	r3, #1
 800075a:	b2db      	uxtb	r3, r3
 800075c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
					  if(tempTime.Min == 0x3C){
 8000760:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8000764:	2b3c      	cmp	r3, #60	; 0x3c
 8000766:	d102      	bne.n	800076e <main+0x23e>
						  tempTime.Min = 0x00;
 8000768:	2300      	movs	r3, #0
 800076a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
					  }
				  }

				  while(HAL_GPIO_ReadPin(GPIOA, INC) == 0);
 800076e:	bf00      	nop
 8000770:	2104      	movs	r1, #4
 8000772:	4830      	ldr	r0, [pc, #192]	; (8000834 <main+0x304>)
 8000774:	f000 fd84 	bl	8001280 <HAL_GPIO_ReadPin>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d0f8      	beq.n	8000770 <main+0x240>
			  }

			  //prelazak na minute ili na sledeci alarm
			  if(HAL_GPIO_ReadPin(GPIOA, NEXT) == 0){
 800077e:	2108      	movs	r1, #8
 8000780:	482c      	ldr	r0, [pc, #176]	; (8000834 <main+0x304>)
 8000782:	f000 fd7d 	bl	8001280 <HAL_GPIO_ReadPin>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d134      	bne.n	80007f6 <main+0x2c6>
				  hourIndicator = -1 * hourIndicator;
 800078c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000790:	425b      	negs	r3, r3
 8000792:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
				  minIndicator = -1 * minIndicator;
 8000796:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800079a:	425b      	negs	r3, r3
 800079c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

				  if(hourIndicator == 1){
 80007a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80007a4:	2b01      	cmp	r3, #1
 80007a6:	d11e      	bne.n	80007e6 <main+0x2b6>
					 medicineReminders[i].Hour = tempTime.Hour;
 80007a8:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80007ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80007b0:	005b      	lsls	r3, r3, #1
 80007b2:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80007b6:	440b      	add	r3, r1
 80007b8:	f803 2c24 	strb.w	r2, [r3, #-36]
					 medicineReminders[i].Min = tempTime.Min;
 80007bc:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 80007c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80007c4:	005b      	lsls	r3, r3, #1
 80007c6:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80007ca:	440b      	add	r3, r1
 80007cc:	f803 2c23 	strb.w	r2, [r3, #-35]

					 tempTime.Hour = 0x00;
 80007d0:	2300      	movs	r3, #0
 80007d2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
					 tempTime.Min = 0x00;
 80007d6:	2300      	movs	r3, #0
 80007d8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

					 ++i;
 80007dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80007e0:	3301      	adds	r3, #1
 80007e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
				  }
				  while(HAL_GPIO_ReadPin(GPIOA, NEXT) == 0);
 80007e6:	bf00      	nop
 80007e8:	2108      	movs	r1, #8
 80007ea:	4812      	ldr	r0, [pc, #72]	; (8000834 <main+0x304>)
 80007ec:	f000 fd48 	bl	8001280 <HAL_GPIO_ReadPin>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d0f8      	beq.n	80007e8 <main+0x2b8>
		  while(HAL_GPIO_ReadPin(GPIOA, SET_MAD) != 0 && i < MAX_REMINDERS) {
 80007f6:	2102      	movs	r1, #2
 80007f8:	480e      	ldr	r0, [pc, #56]	; (8000834 <main+0x304>)
 80007fa:	f000 fd41 	bl	8001280 <HAL_GPIO_ReadPin>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d004      	beq.n	800080e <main+0x2de>
 8000804:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000808:	2b09      	cmp	r3, #9
 800080a:	f77f af5f 	ble.w	80006cc <main+0x19c>
			  }
		  }

		  medicineRemindersCount = i;
 800080e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000812:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	  get_time();
 8000816:	e6ca      	b.n	80005ae <main+0x7e>
 8000818:	0800356c 	.word	0x0800356c
 800081c:	0800357c 	.word	0x0800357c
 8000820:	40010c00 	.word	0x40010c00
 8000824:	200000ec 	.word	0x200000ec
 8000828:	20000118 	.word	0x20000118
 800082c:	08003524 	.word	0x08003524
 8000830:	08003538 	.word	0x08003538
 8000834:	40010800 	.word	0x40010800
 8000838:	08003550 	.word	0x08003550
 800083c:	08003560 	.word	0x08003560

08000840 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b094      	sub	sp, #80	; 0x50
 8000844:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000846:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800084a:	2228      	movs	r2, #40	; 0x28
 800084c:	2100      	movs	r1, #0
 800084e:	4618      	mov	r0, r3
 8000850:	f002 fa2a 	bl	8002ca8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000854:	f107 0314 	add.w	r3, r7, #20
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
 800085e:	609a      	str	r2, [r3, #8]
 8000860:	60da      	str	r2, [r3, #12]
 8000862:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000864:	1d3b      	adds	r3, r7, #4
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	609a      	str	r2, [r3, #8]
 800086e:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000870:	230a      	movs	r3, #10
 8000872:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000874:	2301      	movs	r3, #1
 8000876:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000878:	2310      	movs	r3, #16
 800087a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800087c:	2301      	movs	r3, #1
 800087e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000880:	2300      	movs	r3, #0
 8000882:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000884:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000888:	4618      	mov	r0, r3
 800088a:	f000 fe6d 	bl	8001568 <HAL_RCC_OscConfig>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000894:	f000 f90a 	bl	8000aac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000898:	230f      	movs	r3, #15
 800089a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800089c:	2300      	movs	r3, #0
 800089e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008a0:	2300      	movs	r3, #0
 80008a2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008a4:	2300      	movs	r3, #0
 80008a6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008a8:	2300      	movs	r3, #0
 80008aa:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008ac:	f107 0314 	add.w	r3, r7, #20
 80008b0:	2100      	movs	r1, #0
 80008b2:	4618      	mov	r0, r3
 80008b4:	f001 f8d8 	bl	8001a68 <HAL_RCC_ClockConfig>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80008be:	f000 f8f5 	bl	8000aac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80008c2:	2301      	movs	r3, #1
 80008c4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80008c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008ca:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008cc:	1d3b      	adds	r3, r7, #4
 80008ce:	4618      	mov	r0, r3
 80008d0:	f001 fa66 	bl	8001da0 <HAL_RCCEx_PeriphCLKConfig>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80008da:	f000 f8e7 	bl	8000aac <Error_Handler>
  }
}
 80008de:	bf00      	nop
 80008e0:	3750      	adds	r7, #80	; 0x50
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
	...

080008e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008ec:	4b12      	ldr	r3, [pc, #72]	; (8000938 <MX_I2C1_Init+0x50>)
 80008ee:	4a13      	ldr	r2, [pc, #76]	; (800093c <MX_I2C1_Init+0x54>)
 80008f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008f2:	4b11      	ldr	r3, [pc, #68]	; (8000938 <MX_I2C1_Init+0x50>)
 80008f4:	4a12      	ldr	r2, [pc, #72]	; (8000940 <MX_I2C1_Init+0x58>)
 80008f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008f8:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <MX_I2C1_Init+0x50>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008fe:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <MX_I2C1_Init+0x50>)
 8000900:	2200      	movs	r2, #0
 8000902:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000904:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <MX_I2C1_Init+0x50>)
 8000906:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800090a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800090c:	4b0a      	ldr	r3, [pc, #40]	; (8000938 <MX_I2C1_Init+0x50>)
 800090e:	2200      	movs	r2, #0
 8000910:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000912:	4b09      	ldr	r3, [pc, #36]	; (8000938 <MX_I2C1_Init+0x50>)
 8000914:	2200      	movs	r2, #0
 8000916:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000918:	4b07      	ldr	r3, [pc, #28]	; (8000938 <MX_I2C1_Init+0x50>)
 800091a:	2200      	movs	r2, #0
 800091c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800091e:	4b06      	ldr	r3, [pc, #24]	; (8000938 <MX_I2C1_Init+0x50>)
 8000920:	2200      	movs	r2, #0
 8000922:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000924:	4804      	ldr	r0, [pc, #16]	; (8000938 <MX_I2C1_Init+0x50>)
 8000926:	f000 fcdb 	bl	80012e0 <HAL_I2C_Init>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000930:	f000 f8bc 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000934:	bf00      	nop
 8000936:	bd80      	pop	{r7, pc}
 8000938:	20000098 	.word	0x20000098
 800093c:	40005400 	.word	0x40005400
 8000940:	000186a0 	.word	0x000186a0

08000944 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800094a:	1d3b      	adds	r3, r7, #4
 800094c:	2100      	movs	r1, #0
 800094e:	460a      	mov	r2, r1
 8000950:	801a      	strh	r2, [r3, #0]
 8000952:	460a      	mov	r2, r1
 8000954:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8000956:	2300      	movs	r3, #0
 8000958:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 800095a:	4b1d      	ldr	r3, [pc, #116]	; (80009d0 <MX_RTC_Init+0x8c>)
 800095c:	4a1d      	ldr	r2, [pc, #116]	; (80009d4 <MX_RTC_Init+0x90>)
 800095e:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000960:	4b1b      	ldr	r3, [pc, #108]	; (80009d0 <MX_RTC_Init+0x8c>)
 8000962:	f04f 32ff 	mov.w	r2, #4294967295
 8000966:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8000968:	4b19      	ldr	r3, [pc, #100]	; (80009d0 <MX_RTC_Init+0x8c>)
 800096a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800096e:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000970:	4817      	ldr	r0, [pc, #92]	; (80009d0 <MX_RTC_Init+0x8c>)
 8000972:	f001 fb87 	bl	8002084 <HAL_RTC_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 800097c:	f000 f896 	bl	8000aac <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 8000980:	2300      	movs	r3, #0
 8000982:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000984:	2300      	movs	r3, #0
 8000986:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000988:	2300      	movs	r3, #0
 800098a:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800098c:	1d3b      	adds	r3, r7, #4
 800098e:	2201      	movs	r2, #1
 8000990:	4619      	mov	r1, r3
 8000992:	480f      	ldr	r0, [pc, #60]	; (80009d0 <MX_RTC_Init+0x8c>)
 8000994:	f001 fc0c 	bl	80021b0 <HAL_RTC_SetTime>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 800099e:	f000 f885 	bl	8000aac <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 80009a2:	2301      	movs	r3, #1
 80009a4:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 80009a6:	2301      	movs	r3, #1
 80009a8:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 80009aa:	2301      	movs	r3, #1
 80009ac:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 80009ae:	2300      	movs	r3, #0
 80009b0:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 80009b2:	463b      	mov	r3, r7
 80009b4:	2201      	movs	r2, #1
 80009b6:	4619      	mov	r1, r3
 80009b8:	4805      	ldr	r0, [pc, #20]	; (80009d0 <MX_RTC_Init+0x8c>)
 80009ba:	f001 fd69 	bl	8002490 <HAL_RTC_SetDate>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 80009c4:	f000 f872 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80009c8:	bf00      	nop
 80009ca:	3708      	adds	r7, #8
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	200000ec 	.word	0x200000ec
 80009d4:	40002800 	.word	0x40002800

080009d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b088      	sub	sp, #32
 80009dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009de:	f107 0310 	add.w	r3, r7, #16
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	605a      	str	r2, [r3, #4]
 80009e8:	609a      	str	r2, [r3, #8]
 80009ea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ec:	4b2c      	ldr	r3, [pc, #176]	; (8000aa0 <MX_GPIO_Init+0xc8>)
 80009ee:	699b      	ldr	r3, [r3, #24]
 80009f0:	4a2b      	ldr	r2, [pc, #172]	; (8000aa0 <MX_GPIO_Init+0xc8>)
 80009f2:	f043 0320 	orr.w	r3, r3, #32
 80009f6:	6193      	str	r3, [r2, #24]
 80009f8:	4b29      	ldr	r3, [pc, #164]	; (8000aa0 <MX_GPIO_Init+0xc8>)
 80009fa:	699b      	ldr	r3, [r3, #24]
 80009fc:	f003 0320 	and.w	r3, r3, #32
 8000a00:	60fb      	str	r3, [r7, #12]
 8000a02:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a04:	4b26      	ldr	r3, [pc, #152]	; (8000aa0 <MX_GPIO_Init+0xc8>)
 8000a06:	699b      	ldr	r3, [r3, #24]
 8000a08:	4a25      	ldr	r2, [pc, #148]	; (8000aa0 <MX_GPIO_Init+0xc8>)
 8000a0a:	f043 0304 	orr.w	r3, r3, #4
 8000a0e:	6193      	str	r3, [r2, #24]
 8000a10:	4b23      	ldr	r3, [pc, #140]	; (8000aa0 <MX_GPIO_Init+0xc8>)
 8000a12:	699b      	ldr	r3, [r3, #24]
 8000a14:	f003 0304 	and.w	r3, r3, #4
 8000a18:	60bb      	str	r3, [r7, #8]
 8000a1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a1c:	4b20      	ldr	r3, [pc, #128]	; (8000aa0 <MX_GPIO_Init+0xc8>)
 8000a1e:	699b      	ldr	r3, [r3, #24]
 8000a20:	4a1f      	ldr	r2, [pc, #124]	; (8000aa0 <MX_GPIO_Init+0xc8>)
 8000a22:	f043 0308 	orr.w	r3, r3, #8
 8000a26:	6193      	str	r3, [r2, #24]
 8000a28:	4b1d      	ldr	r3, [pc, #116]	; (8000aa0 <MX_GPIO_Init+0xc8>)
 8000a2a:	699b      	ldr	r3, [r3, #24]
 8000a2c:	f003 0308 	and.w	r3, r3, #8
 8000a30:	607b      	str	r3, [r7, #4]
 8000a32:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000a34:	2200      	movs	r2, #0
 8000a36:	2110      	movs	r1, #16
 8000a38:	481a      	ldr	r0, [pc, #104]	; (8000aa4 <MX_GPIO_Init+0xcc>)
 8000a3a:	f000 fc38 	bl	80012ae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 8000a3e:	2200      	movs	r2, #0
 8000a40:	21fe      	movs	r1, #254	; 0xfe
 8000a42:	4819      	ldr	r0, [pc, #100]	; (8000aa8 <MX_GPIO_Init+0xd0>)
 8000a44:	f000 fc33 	bl	80012ae <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000a48:	230e      	movs	r3, #14
 8000a4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a54:	f107 0310 	add.w	r3, r7, #16
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4812      	ldr	r0, [pc, #72]	; (8000aa4 <MX_GPIO_Init+0xcc>)
 8000a5c:	f000 fabe 	bl	8000fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a60:	2310      	movs	r3, #16
 8000a62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a64:	2301      	movs	r3, #1
 8000a66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a70:	f107 0310 	add.w	r3, r7, #16
 8000a74:	4619      	mov	r1, r3
 8000a76:	480b      	ldr	r0, [pc, #44]	; (8000aa4 <MX_GPIO_Init+0xcc>)
 8000a78:	f000 fab0 	bl	8000fdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB3 PB4 
                           PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 8000a7c:	23fe      	movs	r3, #254	; 0xfe
 8000a7e:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a80:	2301      	movs	r3, #1
 8000a82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a8c:	f107 0310 	add.w	r3, r7, #16
 8000a90:	4619      	mov	r1, r3
 8000a92:	4805      	ldr	r0, [pc, #20]	; (8000aa8 <MX_GPIO_Init+0xd0>)
 8000a94:	f000 faa2 	bl	8000fdc <HAL_GPIO_Init>

}
 8000a98:	bf00      	nop
 8000a9a:	3720      	adds	r7, #32
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40021000 	.word	0x40021000
 8000aa4:	40010800 	.word	0x40010800
 8000aa8:	40010c00 	.word	0x40010c00

08000aac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ab0:	bf00      	nop
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bc80      	pop	{r7}
 8000ab6:	4770      	bx	lr

08000ab8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b085      	sub	sp, #20
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000abe:	4b15      	ldr	r3, [pc, #84]	; (8000b14 <HAL_MspInit+0x5c>)
 8000ac0:	699b      	ldr	r3, [r3, #24]
 8000ac2:	4a14      	ldr	r2, [pc, #80]	; (8000b14 <HAL_MspInit+0x5c>)
 8000ac4:	f043 0301 	orr.w	r3, r3, #1
 8000ac8:	6193      	str	r3, [r2, #24]
 8000aca:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <HAL_MspInit+0x5c>)
 8000acc:	699b      	ldr	r3, [r3, #24]
 8000ace:	f003 0301 	and.w	r3, r3, #1
 8000ad2:	60bb      	str	r3, [r7, #8]
 8000ad4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad6:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <HAL_MspInit+0x5c>)
 8000ad8:	69db      	ldr	r3, [r3, #28]
 8000ada:	4a0e      	ldr	r2, [pc, #56]	; (8000b14 <HAL_MspInit+0x5c>)
 8000adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae0:	61d3      	str	r3, [r2, #28]
 8000ae2:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <HAL_MspInit+0x5c>)
 8000ae4:	69db      	ldr	r3, [r3, #28]
 8000ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aea:	607b      	str	r3, [r7, #4]
 8000aec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000aee:	4b0a      	ldr	r3, [pc, #40]	; (8000b18 <HAL_MspInit+0x60>)
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	4a04      	ldr	r2, [pc, #16]	; (8000b18 <HAL_MspInit+0x60>)
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	3714      	adds	r7, #20
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bc80      	pop	{r7}
 8000b12:	4770      	bx	lr
 8000b14:	40021000 	.word	0x40021000
 8000b18:	40010000 	.word	0x40010000

08000b1c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b08a      	sub	sp, #40	; 0x28
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b24:	f107 0314 	add.w	r3, r7, #20
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a1e      	ldr	r2, [pc, #120]	; (8000bb0 <HAL_I2C_MspInit+0x94>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d134      	bne.n	8000ba6 <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b3c:	4b1d      	ldr	r3, [pc, #116]	; (8000bb4 <HAL_I2C_MspInit+0x98>)
 8000b3e:	699b      	ldr	r3, [r3, #24]
 8000b40:	4a1c      	ldr	r2, [pc, #112]	; (8000bb4 <HAL_I2C_MspInit+0x98>)
 8000b42:	f043 0308 	orr.w	r3, r3, #8
 8000b46:	6193      	str	r3, [r2, #24]
 8000b48:	4b1a      	ldr	r3, [pc, #104]	; (8000bb4 <HAL_I2C_MspInit+0x98>)
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	f003 0308 	and.w	r3, r3, #8
 8000b50:	613b      	str	r3, [r7, #16]
 8000b52:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b54:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b5a:	2312      	movs	r3, #18
 8000b5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b62:	2303      	movs	r3, #3
 8000b64:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b66:	f107 0314 	add.w	r3, r7, #20
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4812      	ldr	r0, [pc, #72]	; (8000bb8 <HAL_I2C_MspInit+0x9c>)
 8000b6e:	f000 fa35 	bl	8000fdc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000b72:	4b12      	ldr	r3, [pc, #72]	; (8000bbc <HAL_I2C_MspInit+0xa0>)
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	627b      	str	r3, [r7, #36]	; 0x24
 8000b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b7a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000b7e:	627b      	str	r3, [r7, #36]	; 0x24
 8000b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b82:	f043 0302 	orr.w	r3, r3, #2
 8000b86:	627b      	str	r3, [r7, #36]	; 0x24
 8000b88:	4a0c      	ldr	r2, [pc, #48]	; (8000bbc <HAL_I2C_MspInit+0xa0>)
 8000b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b8c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b8e:	4b09      	ldr	r3, [pc, #36]	; (8000bb4 <HAL_I2C_MspInit+0x98>)
 8000b90:	69db      	ldr	r3, [r3, #28]
 8000b92:	4a08      	ldr	r2, [pc, #32]	; (8000bb4 <HAL_I2C_MspInit+0x98>)
 8000b94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b98:	61d3      	str	r3, [r2, #28]
 8000b9a:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <HAL_I2C_MspInit+0x98>)
 8000b9c:	69db      	ldr	r3, [r3, #28]
 8000b9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ba6:	bf00      	nop
 8000ba8:	3728      	adds	r7, #40	; 0x28
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40005400 	.word	0x40005400
 8000bb4:	40021000 	.word	0x40021000
 8000bb8:	40010c00 	.word	0x40010c00
 8000bbc:	40010000 	.word	0x40010000

08000bc0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a0b      	ldr	r2, [pc, #44]	; (8000bfc <HAL_RTC_MspInit+0x3c>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d110      	bne.n	8000bf4 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000bd2:	f000 fcbd 	bl	8001550 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000bd6:	4b0a      	ldr	r3, [pc, #40]	; (8000c00 <HAL_RTC_MspInit+0x40>)
 8000bd8:	69db      	ldr	r3, [r3, #28]
 8000bda:	4a09      	ldr	r2, [pc, #36]	; (8000c00 <HAL_RTC_MspInit+0x40>)
 8000bdc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000be0:	61d3      	str	r3, [r2, #28]
 8000be2:	4b07      	ldr	r3, [pc, #28]	; (8000c00 <HAL_RTC_MspInit+0x40>)
 8000be4:	69db      	ldr	r3, [r3, #28]
 8000be6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000bee:	4b05      	ldr	r3, [pc, #20]	; (8000c04 <HAL_RTC_MspInit+0x44>)
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000bf4:	bf00      	nop
 8000bf6:	3710      	adds	r7, #16
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	40002800 	.word	0x40002800
 8000c00:	40021000 	.word	0x40021000
 8000c04:	4242043c 	.word	0x4242043c

08000c08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bc80      	pop	{r7}
 8000c12:	4770      	bx	lr

08000c14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c18:	e7fe      	b.n	8000c18 <HardFault_Handler+0x4>

08000c1a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c1e:	e7fe      	b.n	8000c1e <MemManage_Handler+0x4>

08000c20 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c24:	e7fe      	b.n	8000c24 <BusFault_Handler+0x4>

08000c26 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c2a:	e7fe      	b.n	8000c2a <UsageFault_Handler+0x4>

08000c2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bc80      	pop	{r7}
 8000c36:	4770      	bx	lr

08000c38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bc80      	pop	{r7}
 8000c42:	4770      	bx	lr

08000c44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bc80      	pop	{r7}
 8000c4e:	4770      	bx	lr

08000c50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c54:	f000 f8a0 	bl	8000d98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c58:	bf00      	nop
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000c64:	4b11      	ldr	r3, [pc, #68]	; (8000cac <_sbrk+0x50>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d102      	bne.n	8000c72 <_sbrk+0x16>
		heap_end = &end;
 8000c6c:	4b0f      	ldr	r3, [pc, #60]	; (8000cac <_sbrk+0x50>)
 8000c6e:	4a10      	ldr	r2, [pc, #64]	; (8000cb0 <_sbrk+0x54>)
 8000c70:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000c72:	4b0e      	ldr	r3, [pc, #56]	; (8000cac <_sbrk+0x50>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000c78:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <_sbrk+0x50>)
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	4413      	add	r3, r2
 8000c80:	466a      	mov	r2, sp
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d907      	bls.n	8000c96 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000c86:	f001 ffe5 	bl	8002c54 <__errno>
 8000c8a:	4602      	mov	r2, r0
 8000c8c:	230c      	movs	r3, #12
 8000c8e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000c90:	f04f 33ff 	mov.w	r3, #4294967295
 8000c94:	e006      	b.n	8000ca4 <_sbrk+0x48>
	}

	heap_end += incr;
 8000c96:	4b05      	ldr	r3, [pc, #20]	; (8000cac <_sbrk+0x50>)
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	4a03      	ldr	r2, [pc, #12]	; (8000cac <_sbrk+0x50>)
 8000ca0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000ca2:	68fb      	ldr	r3, [r7, #12]
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	3710      	adds	r7, #16
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	2000008c 	.word	0x2000008c
 8000cb0:	20000128 	.word	0x20000128

08000cb4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bc80      	pop	{r7}
 8000cbe:	4770      	bx	lr

08000cc0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cc0:	480c      	ldr	r0, [pc, #48]	; (8000cf4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cc2:	490d      	ldr	r1, [pc, #52]	; (8000cf8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cc4:	4a0d      	ldr	r2, [pc, #52]	; (8000cfc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc8:	e002      	b.n	8000cd0 <LoopCopyDataInit>

08000cca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ccc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cce:	3304      	adds	r3, #4

08000cd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd4:	d3f9      	bcc.n	8000cca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cd6:	4a0a      	ldr	r2, [pc, #40]	; (8000d00 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cd8:	4c0a      	ldr	r4, [pc, #40]	; (8000d04 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cdc:	e001      	b.n	8000ce2 <LoopFillZerobss>

08000cde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce0:	3204      	adds	r2, #4

08000ce2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ce2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce4:	d3fb      	bcc.n	8000cde <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ce6:	f7ff ffe5 	bl	8000cb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cea:	f001 ffb9 	bl	8002c60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cee:	f7ff fc1f 	bl	8000530 <main>
  bx lr
 8000cf2:	4770      	bx	lr
  ldr r0, =_sdata
 8000cf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000cfc:	08003600 	.word	0x08003600
  ldr r2, =_sbss
 8000d00:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d04:	20000124 	.word	0x20000124

08000d08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d08:	e7fe      	b.n	8000d08 <ADC1_2_IRQHandler>
	...

08000d0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d10:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <HAL_Init+0x28>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a07      	ldr	r2, [pc, #28]	; (8000d34 <HAL_Init+0x28>)
 8000d16:	f043 0310 	orr.w	r3, r3, #16
 8000d1a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d1c:	2003      	movs	r0, #3
 8000d1e:	f000 f929 	bl	8000f74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d22:	2000      	movs	r0, #0
 8000d24:	f000 f808 	bl	8000d38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d28:	f7ff fec6 	bl	8000ab8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d2c:	2300      	movs	r3, #0
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40022000 	.word	0x40022000

08000d38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d40:	4b12      	ldr	r3, [pc, #72]	; (8000d8c <HAL_InitTick+0x54>)
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <HAL_InitTick+0x58>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	4619      	mov	r1, r3
 8000d4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d56:	4618      	mov	r0, r3
 8000d58:	f000 f933 	bl	8000fc2 <HAL_SYSTICK_Config>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	e00e      	b.n	8000d84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2b0f      	cmp	r3, #15
 8000d6a:	d80a      	bhi.n	8000d82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	6879      	ldr	r1, [r7, #4]
 8000d70:	f04f 30ff 	mov.w	r0, #4294967295
 8000d74:	f000 f909 	bl	8000f8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d78:	4a06      	ldr	r2, [pc, #24]	; (8000d94 <HAL_InitTick+0x5c>)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	e000      	b.n	8000d84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20000000 	.word	0x20000000
 8000d90:	20000008 	.word	0x20000008
 8000d94:	20000004 	.word	0x20000004

08000d98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d9c:	4b05      	ldr	r3, [pc, #20]	; (8000db4 <HAL_IncTick+0x1c>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	461a      	mov	r2, r3
 8000da2:	4b05      	ldr	r3, [pc, #20]	; (8000db8 <HAL_IncTick+0x20>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4413      	add	r3, r2
 8000da8:	4a03      	ldr	r2, [pc, #12]	; (8000db8 <HAL_IncTick+0x20>)
 8000daa:	6013      	str	r3, [r2, #0]
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bc80      	pop	{r7}
 8000db2:	4770      	bx	lr
 8000db4:	20000008 	.word	0x20000008
 8000db8:	2000011c 	.word	0x2000011c

08000dbc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc0:	4b02      	ldr	r3, [pc, #8]	; (8000dcc <HAL_GetTick+0x10>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bc80      	pop	{r7}
 8000dca:	4770      	bx	lr
 8000dcc:	2000011c 	.word	0x2000011c

08000dd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dd8:	f7ff fff0 	bl	8000dbc <HAL_GetTick>
 8000ddc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000de8:	d005      	beq.n	8000df6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dea:	4b09      	ldr	r3, [pc, #36]	; (8000e10 <HAL_Delay+0x40>)
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	461a      	mov	r2, r3
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	4413      	add	r3, r2
 8000df4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000df6:	bf00      	nop
 8000df8:	f7ff ffe0 	bl	8000dbc <HAL_GetTick>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	68fa      	ldr	r2, [r7, #12]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d8f7      	bhi.n	8000df8 <HAL_Delay+0x28>
  {
  }
}
 8000e08:	bf00      	nop
 8000e0a:	3710      	adds	r7, #16
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	20000008 	.word	0x20000008

08000e14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b085      	sub	sp, #20
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	f003 0307 	and.w	r3, r3, #7
 8000e22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e24:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <__NVIC_SetPriorityGrouping+0x44>)
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e2a:	68ba      	ldr	r2, [r7, #8]
 8000e2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e30:	4013      	ands	r3, r2
 8000e32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e46:	4a04      	ldr	r2, [pc, #16]	; (8000e58 <__NVIC_SetPriorityGrouping+0x44>)
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	60d3      	str	r3, [r2, #12]
}
 8000e4c:	bf00      	nop
 8000e4e:	3714      	adds	r7, #20
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bc80      	pop	{r7}
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e60:	4b04      	ldr	r3, [pc, #16]	; (8000e74 <__NVIC_GetPriorityGrouping+0x18>)
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	0a1b      	lsrs	r3, r3, #8
 8000e66:	f003 0307 	and.w	r3, r3, #7
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bc80      	pop	{r7}
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	e000ed00 	.word	0xe000ed00

08000e78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	6039      	str	r1, [r7, #0]
 8000e82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	db0a      	blt.n	8000ea2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	b2da      	uxtb	r2, r3
 8000e90:	490c      	ldr	r1, [pc, #48]	; (8000ec4 <__NVIC_SetPriority+0x4c>)
 8000e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e96:	0112      	lsls	r2, r2, #4
 8000e98:	b2d2      	uxtb	r2, r2
 8000e9a:	440b      	add	r3, r1
 8000e9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ea0:	e00a      	b.n	8000eb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	b2da      	uxtb	r2, r3
 8000ea6:	4908      	ldr	r1, [pc, #32]	; (8000ec8 <__NVIC_SetPriority+0x50>)
 8000ea8:	79fb      	ldrb	r3, [r7, #7]
 8000eaa:	f003 030f 	and.w	r3, r3, #15
 8000eae:	3b04      	subs	r3, #4
 8000eb0:	0112      	lsls	r2, r2, #4
 8000eb2:	b2d2      	uxtb	r2, r2
 8000eb4:	440b      	add	r3, r1
 8000eb6:	761a      	strb	r2, [r3, #24]
}
 8000eb8:	bf00      	nop
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bc80      	pop	{r7}
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	e000e100 	.word	0xe000e100
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b089      	sub	sp, #36	; 0x24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	f003 0307 	and.w	r3, r3, #7
 8000ede:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	f1c3 0307 	rsb	r3, r3, #7
 8000ee6:	2b04      	cmp	r3, #4
 8000ee8:	bf28      	it	cs
 8000eea:	2304      	movcs	r3, #4
 8000eec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	3304      	adds	r3, #4
 8000ef2:	2b06      	cmp	r3, #6
 8000ef4:	d902      	bls.n	8000efc <NVIC_EncodePriority+0x30>
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	3b03      	subs	r3, #3
 8000efa:	e000      	b.n	8000efe <NVIC_EncodePriority+0x32>
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f00:	f04f 32ff 	mov.w	r2, #4294967295
 8000f04:	69bb      	ldr	r3, [r7, #24]
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	43da      	mvns	r2, r3
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	401a      	ands	r2, r3
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f14:	f04f 31ff 	mov.w	r1, #4294967295
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1e:	43d9      	mvns	r1, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f24:	4313      	orrs	r3, r2
         );
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3724      	adds	r7, #36	; 0x24
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bc80      	pop	{r7}
 8000f2e:	4770      	bx	lr

08000f30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3b01      	subs	r3, #1
 8000f3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f40:	d301      	bcc.n	8000f46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f42:	2301      	movs	r3, #1
 8000f44:	e00f      	b.n	8000f66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f46:	4a0a      	ldr	r2, [pc, #40]	; (8000f70 <SysTick_Config+0x40>)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f4e:	210f      	movs	r1, #15
 8000f50:	f04f 30ff 	mov.w	r0, #4294967295
 8000f54:	f7ff ff90 	bl	8000e78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f58:	4b05      	ldr	r3, [pc, #20]	; (8000f70 <SysTick_Config+0x40>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f5e:	4b04      	ldr	r3, [pc, #16]	; (8000f70 <SysTick_Config+0x40>)
 8000f60:	2207      	movs	r2, #7
 8000f62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	e000e010 	.word	0xe000e010

08000f74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f7ff ff49 	bl	8000e14 <__NVIC_SetPriorityGrouping>
}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b086      	sub	sp, #24
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	4603      	mov	r3, r0
 8000f92:	60b9      	str	r1, [r7, #8]
 8000f94:	607a      	str	r2, [r7, #4]
 8000f96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f9c:	f7ff ff5e 	bl	8000e5c <__NVIC_GetPriorityGrouping>
 8000fa0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	68b9      	ldr	r1, [r7, #8]
 8000fa6:	6978      	ldr	r0, [r7, #20]
 8000fa8:	f7ff ff90 	bl	8000ecc <NVIC_EncodePriority>
 8000fac:	4602      	mov	r2, r0
 8000fae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fb2:	4611      	mov	r1, r2
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff ff5f 	bl	8000e78 <__NVIC_SetPriority>
}
 8000fba:	bf00      	nop
 8000fbc:	3718      	adds	r7, #24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b082      	sub	sp, #8
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f7ff ffb0 	bl	8000f30 <SysTick_Config>
 8000fd0:	4603      	mov	r3, r0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
	...

08000fdc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b08b      	sub	sp, #44	; 0x2c
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000fea:	2300      	movs	r3, #0
 8000fec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fee:	e121      	b.n	8001234 <HAL_GPIO_Init+0x258>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	69fa      	ldr	r2, [r7, #28]
 8001000:	4013      	ands	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	429a      	cmp	r2, r3
 800100a:	f040 8110 	bne.w	800122e <HAL_GPIO_Init+0x252>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	2b12      	cmp	r3, #18
 8001014:	d034      	beq.n	8001080 <HAL_GPIO_Init+0xa4>
 8001016:	2b12      	cmp	r3, #18
 8001018:	d80d      	bhi.n	8001036 <HAL_GPIO_Init+0x5a>
 800101a:	2b02      	cmp	r3, #2
 800101c:	d02b      	beq.n	8001076 <HAL_GPIO_Init+0x9a>
 800101e:	2b02      	cmp	r3, #2
 8001020:	d804      	bhi.n	800102c <HAL_GPIO_Init+0x50>
 8001022:	2b00      	cmp	r3, #0
 8001024:	d031      	beq.n	800108a <HAL_GPIO_Init+0xae>
 8001026:	2b01      	cmp	r3, #1
 8001028:	d01c      	beq.n	8001064 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800102a:	e048      	b.n	80010be <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800102c:	2b03      	cmp	r3, #3
 800102e:	d043      	beq.n	80010b8 <HAL_GPIO_Init+0xdc>
 8001030:	2b11      	cmp	r3, #17
 8001032:	d01b      	beq.n	800106c <HAL_GPIO_Init+0x90>
          break;
 8001034:	e043      	b.n	80010be <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001036:	4a86      	ldr	r2, [pc, #536]	; (8001250 <HAL_GPIO_Init+0x274>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d026      	beq.n	800108a <HAL_GPIO_Init+0xae>
 800103c:	4a84      	ldr	r2, [pc, #528]	; (8001250 <HAL_GPIO_Init+0x274>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d806      	bhi.n	8001050 <HAL_GPIO_Init+0x74>
 8001042:	4a84      	ldr	r2, [pc, #528]	; (8001254 <HAL_GPIO_Init+0x278>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d020      	beq.n	800108a <HAL_GPIO_Init+0xae>
 8001048:	4a83      	ldr	r2, [pc, #524]	; (8001258 <HAL_GPIO_Init+0x27c>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d01d      	beq.n	800108a <HAL_GPIO_Init+0xae>
          break;
 800104e:	e036      	b.n	80010be <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001050:	4a82      	ldr	r2, [pc, #520]	; (800125c <HAL_GPIO_Init+0x280>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d019      	beq.n	800108a <HAL_GPIO_Init+0xae>
 8001056:	4a82      	ldr	r2, [pc, #520]	; (8001260 <HAL_GPIO_Init+0x284>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d016      	beq.n	800108a <HAL_GPIO_Init+0xae>
 800105c:	4a81      	ldr	r2, [pc, #516]	; (8001264 <HAL_GPIO_Init+0x288>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d013      	beq.n	800108a <HAL_GPIO_Init+0xae>
          break;
 8001062:	e02c      	b.n	80010be <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	623b      	str	r3, [r7, #32]
          break;
 800106a:	e028      	b.n	80010be <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	3304      	adds	r3, #4
 8001072:	623b      	str	r3, [r7, #32]
          break;
 8001074:	e023      	b.n	80010be <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	68db      	ldr	r3, [r3, #12]
 800107a:	3308      	adds	r3, #8
 800107c:	623b      	str	r3, [r7, #32]
          break;
 800107e:	e01e      	b.n	80010be <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	330c      	adds	r3, #12
 8001086:	623b      	str	r3, [r7, #32]
          break;
 8001088:	e019      	b.n	80010be <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d102      	bne.n	8001098 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001092:	2304      	movs	r3, #4
 8001094:	623b      	str	r3, [r7, #32]
          break;
 8001096:	e012      	b.n	80010be <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	2b01      	cmp	r3, #1
 800109e:	d105      	bne.n	80010ac <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010a0:	2308      	movs	r3, #8
 80010a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	69fa      	ldr	r2, [r7, #28]
 80010a8:	611a      	str	r2, [r3, #16]
          break;
 80010aa:	e008      	b.n	80010be <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010ac:	2308      	movs	r3, #8
 80010ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	69fa      	ldr	r2, [r7, #28]
 80010b4:	615a      	str	r2, [r3, #20]
          break;
 80010b6:	e002      	b.n	80010be <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80010b8:	2300      	movs	r3, #0
 80010ba:	623b      	str	r3, [r7, #32]
          break;
 80010bc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	2bff      	cmp	r3, #255	; 0xff
 80010c2:	d801      	bhi.n	80010c8 <HAL_GPIO_Init+0xec>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	e001      	b.n	80010cc <HAL_GPIO_Init+0xf0>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	3304      	adds	r3, #4
 80010cc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010ce:	69bb      	ldr	r3, [r7, #24]
 80010d0:	2bff      	cmp	r3, #255	; 0xff
 80010d2:	d802      	bhi.n	80010da <HAL_GPIO_Init+0xfe>
 80010d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	e002      	b.n	80010e0 <HAL_GPIO_Init+0x104>
 80010da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010dc:	3b08      	subs	r3, #8
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	210f      	movs	r1, #15
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	fa01 f303 	lsl.w	r3, r1, r3
 80010ee:	43db      	mvns	r3, r3
 80010f0:	401a      	ands	r2, r3
 80010f2:	6a39      	ldr	r1, [r7, #32]
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	fa01 f303 	lsl.w	r3, r1, r3
 80010fa:	431a      	orrs	r2, r3
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001108:	2b00      	cmp	r3, #0
 800110a:	f000 8090 	beq.w	800122e <HAL_GPIO_Init+0x252>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800110e:	4b56      	ldr	r3, [pc, #344]	; (8001268 <HAL_GPIO_Init+0x28c>)
 8001110:	699b      	ldr	r3, [r3, #24]
 8001112:	4a55      	ldr	r2, [pc, #340]	; (8001268 <HAL_GPIO_Init+0x28c>)
 8001114:	f043 0301 	orr.w	r3, r3, #1
 8001118:	6193      	str	r3, [r2, #24]
 800111a:	4b53      	ldr	r3, [pc, #332]	; (8001268 <HAL_GPIO_Init+0x28c>)
 800111c:	699b      	ldr	r3, [r3, #24]
 800111e:	f003 0301 	and.w	r3, r3, #1
 8001122:	60bb      	str	r3, [r7, #8]
 8001124:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001126:	4a51      	ldr	r2, [pc, #324]	; (800126c <HAL_GPIO_Init+0x290>)
 8001128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800112a:	089b      	lsrs	r3, r3, #2
 800112c:	3302      	adds	r3, #2
 800112e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001132:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001136:	f003 0303 	and.w	r3, r3, #3
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	220f      	movs	r2, #15
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	43db      	mvns	r3, r3
 8001144:	68fa      	ldr	r2, [r7, #12]
 8001146:	4013      	ands	r3, r2
 8001148:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a48      	ldr	r2, [pc, #288]	; (8001270 <HAL_GPIO_Init+0x294>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d00d      	beq.n	800116e <HAL_GPIO_Init+0x192>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a47      	ldr	r2, [pc, #284]	; (8001274 <HAL_GPIO_Init+0x298>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d007      	beq.n	800116a <HAL_GPIO_Init+0x18e>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a46      	ldr	r2, [pc, #280]	; (8001278 <HAL_GPIO_Init+0x29c>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d101      	bne.n	8001166 <HAL_GPIO_Init+0x18a>
 8001162:	2302      	movs	r3, #2
 8001164:	e004      	b.n	8001170 <HAL_GPIO_Init+0x194>
 8001166:	2303      	movs	r3, #3
 8001168:	e002      	b.n	8001170 <HAL_GPIO_Init+0x194>
 800116a:	2301      	movs	r3, #1
 800116c:	e000      	b.n	8001170 <HAL_GPIO_Init+0x194>
 800116e:	2300      	movs	r3, #0
 8001170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001172:	f002 0203 	and.w	r2, r2, #3
 8001176:	0092      	lsls	r2, r2, #2
 8001178:	4093      	lsls	r3, r2
 800117a:	68fa      	ldr	r2, [r7, #12]
 800117c:	4313      	orrs	r3, r2
 800117e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001180:	493a      	ldr	r1, [pc, #232]	; (800126c <HAL_GPIO_Init+0x290>)
 8001182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001184:	089b      	lsrs	r3, r3, #2
 8001186:	3302      	adds	r3, #2
 8001188:	68fa      	ldr	r2, [r7, #12]
 800118a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d006      	beq.n	80011a8 <HAL_GPIO_Init+0x1cc>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800119a:	4b38      	ldr	r3, [pc, #224]	; (800127c <HAL_GPIO_Init+0x2a0>)
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	4937      	ldr	r1, [pc, #220]	; (800127c <HAL_GPIO_Init+0x2a0>)
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	600b      	str	r3, [r1, #0]
 80011a6:	e006      	b.n	80011b6 <HAL_GPIO_Init+0x1da>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80011a8:	4b34      	ldr	r3, [pc, #208]	; (800127c <HAL_GPIO_Init+0x2a0>)
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	43db      	mvns	r3, r3
 80011b0:	4932      	ldr	r1, [pc, #200]	; (800127c <HAL_GPIO_Init+0x2a0>)
 80011b2:	4013      	ands	r3, r2
 80011b4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d006      	beq.n	80011d0 <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011c2:	4b2e      	ldr	r3, [pc, #184]	; (800127c <HAL_GPIO_Init+0x2a0>)
 80011c4:	685a      	ldr	r2, [r3, #4]
 80011c6:	492d      	ldr	r1, [pc, #180]	; (800127c <HAL_GPIO_Init+0x2a0>)
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	604b      	str	r3, [r1, #4]
 80011ce:	e006      	b.n	80011de <HAL_GPIO_Init+0x202>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011d0:	4b2a      	ldr	r3, [pc, #168]	; (800127c <HAL_GPIO_Init+0x2a0>)
 80011d2:	685a      	ldr	r2, [r3, #4]
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	43db      	mvns	r3, r3
 80011d8:	4928      	ldr	r1, [pc, #160]	; (800127c <HAL_GPIO_Init+0x2a0>)
 80011da:	4013      	ands	r3, r2
 80011dc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d006      	beq.n	80011f8 <HAL_GPIO_Init+0x21c>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011ea:	4b24      	ldr	r3, [pc, #144]	; (800127c <HAL_GPIO_Init+0x2a0>)
 80011ec:	689a      	ldr	r2, [r3, #8]
 80011ee:	4923      	ldr	r1, [pc, #140]	; (800127c <HAL_GPIO_Init+0x2a0>)
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	608b      	str	r3, [r1, #8]
 80011f6:	e006      	b.n	8001206 <HAL_GPIO_Init+0x22a>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011f8:	4b20      	ldr	r3, [pc, #128]	; (800127c <HAL_GPIO_Init+0x2a0>)
 80011fa:	689a      	ldr	r2, [r3, #8]
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	43db      	mvns	r3, r3
 8001200:	491e      	ldr	r1, [pc, #120]	; (800127c <HAL_GPIO_Init+0x2a0>)
 8001202:	4013      	ands	r3, r2
 8001204:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d006      	beq.n	8001220 <HAL_GPIO_Init+0x244>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001212:	4b1a      	ldr	r3, [pc, #104]	; (800127c <HAL_GPIO_Init+0x2a0>)
 8001214:	68da      	ldr	r2, [r3, #12]
 8001216:	4919      	ldr	r1, [pc, #100]	; (800127c <HAL_GPIO_Init+0x2a0>)
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	4313      	orrs	r3, r2
 800121c:	60cb      	str	r3, [r1, #12]
 800121e:	e006      	b.n	800122e <HAL_GPIO_Init+0x252>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001220:	4b16      	ldr	r3, [pc, #88]	; (800127c <HAL_GPIO_Init+0x2a0>)
 8001222:	68da      	ldr	r2, [r3, #12]
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	43db      	mvns	r3, r3
 8001228:	4914      	ldr	r1, [pc, #80]	; (800127c <HAL_GPIO_Init+0x2a0>)
 800122a:	4013      	ands	r3, r2
 800122c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800122e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001230:	3301      	adds	r3, #1
 8001232:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123a:	fa22 f303 	lsr.w	r3, r2, r3
 800123e:	2b00      	cmp	r3, #0
 8001240:	f47f aed6 	bne.w	8000ff0 <HAL_GPIO_Init+0x14>
  }
}
 8001244:	bf00      	nop
 8001246:	372c      	adds	r7, #44	; 0x2c
 8001248:	46bd      	mov	sp, r7
 800124a:	bc80      	pop	{r7}
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	10210000 	.word	0x10210000
 8001254:	10110000 	.word	0x10110000
 8001258:	10120000 	.word	0x10120000
 800125c:	10310000 	.word	0x10310000
 8001260:	10320000 	.word	0x10320000
 8001264:	10220000 	.word	0x10220000
 8001268:	40021000 	.word	0x40021000
 800126c:	40010000 	.word	0x40010000
 8001270:	40010800 	.word	0x40010800
 8001274:	40010c00 	.word	0x40010c00
 8001278:	40011000 	.word	0x40011000
 800127c:	40010400 	.word	0x40010400

08001280 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001280:	b480      	push	{r7}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	460b      	mov	r3, r1
 800128a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	689a      	ldr	r2, [r3, #8]
 8001290:	887b      	ldrh	r3, [r7, #2]
 8001292:	4013      	ands	r3, r2
 8001294:	2b00      	cmp	r3, #0
 8001296:	d002      	beq.n	800129e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001298:	2301      	movs	r3, #1
 800129a:	73fb      	strb	r3, [r7, #15]
 800129c:	e001      	b.n	80012a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800129e:	2300      	movs	r3, #0
 80012a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3714      	adds	r7, #20
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bc80      	pop	{r7}
 80012ac:	4770      	bx	lr

080012ae <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012ae:	b480      	push	{r7}
 80012b0:	b083      	sub	sp, #12
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
 80012b6:	460b      	mov	r3, r1
 80012b8:	807b      	strh	r3, [r7, #2]
 80012ba:	4613      	mov	r3, r2
 80012bc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012be:	787b      	ldrb	r3, [r7, #1]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d003      	beq.n	80012cc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012c4:	887a      	ldrh	r2, [r7, #2]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80012ca:	e003      	b.n	80012d4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012cc:	887b      	ldrh	r3, [r7, #2]
 80012ce:	041a      	lsls	r2, r3, #16
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	611a      	str	r2, [r3, #16]
}
 80012d4:	bf00      	nop
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	bc80      	pop	{r7}
 80012dc:	4770      	bx	lr
	...

080012e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d101      	bne.n	80012f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e11f      	b.n	8001532 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d106      	bne.n	800130c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2200      	movs	r2, #0
 8001302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f7ff fc08 	bl	8000b1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2224      	movs	r2, #36	; 0x24
 8001310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f022 0201 	bic.w	r2, r2, #1
 8001322:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001332:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001342:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001344:	f000 fce6 	bl	8001d14 <HAL_RCC_GetPCLK1Freq>
 8001348:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	4a7b      	ldr	r2, [pc, #492]	; (800153c <HAL_I2C_Init+0x25c>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d807      	bhi.n	8001364 <HAL_I2C_Init+0x84>
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	4a7a      	ldr	r2, [pc, #488]	; (8001540 <HAL_I2C_Init+0x260>)
 8001358:	4293      	cmp	r3, r2
 800135a:	bf94      	ite	ls
 800135c:	2301      	movls	r3, #1
 800135e:	2300      	movhi	r3, #0
 8001360:	b2db      	uxtb	r3, r3
 8001362:	e006      	b.n	8001372 <HAL_I2C_Init+0x92>
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	4a77      	ldr	r2, [pc, #476]	; (8001544 <HAL_I2C_Init+0x264>)
 8001368:	4293      	cmp	r3, r2
 800136a:	bf94      	ite	ls
 800136c:	2301      	movls	r3, #1
 800136e:	2300      	movhi	r3, #0
 8001370:	b2db      	uxtb	r3, r3
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e0db      	b.n	8001532 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	4a72      	ldr	r2, [pc, #456]	; (8001548 <HAL_I2C_Init+0x268>)
 800137e:	fba2 2303 	umull	r2, r3, r2, r3
 8001382:	0c9b      	lsrs	r3, r3, #18
 8001384:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	68ba      	ldr	r2, [r7, #8]
 8001396:	430a      	orrs	r2, r1
 8001398:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	6a1b      	ldr	r3, [r3, #32]
 80013a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	4a64      	ldr	r2, [pc, #400]	; (800153c <HAL_I2C_Init+0x25c>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d802      	bhi.n	80013b4 <HAL_I2C_Init+0xd4>
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	3301      	adds	r3, #1
 80013b2:	e009      	b.n	80013c8 <HAL_I2C_Init+0xe8>
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80013ba:	fb02 f303 	mul.w	r3, r2, r3
 80013be:	4a63      	ldr	r2, [pc, #396]	; (800154c <HAL_I2C_Init+0x26c>)
 80013c0:	fba2 2303 	umull	r2, r3, r2, r3
 80013c4:	099b      	lsrs	r3, r3, #6
 80013c6:	3301      	adds	r3, #1
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	6812      	ldr	r2, [r2, #0]
 80013cc:	430b      	orrs	r3, r1
 80013ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	69db      	ldr	r3, [r3, #28]
 80013d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80013da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	4956      	ldr	r1, [pc, #344]	; (800153c <HAL_I2C_Init+0x25c>)
 80013e4:	428b      	cmp	r3, r1
 80013e6:	d80d      	bhi.n	8001404 <HAL_I2C_Init+0x124>
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	1e59      	subs	r1, r3, #1
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80013f6:	3301      	adds	r3, #1
 80013f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013fc:	2b04      	cmp	r3, #4
 80013fe:	bf38      	it	cc
 8001400:	2304      	movcc	r3, #4
 8001402:	e04f      	b.n	80014a4 <HAL_I2C_Init+0x1c4>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d111      	bne.n	8001430 <HAL_I2C_Init+0x150>
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	1e58      	subs	r0, r3, #1
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6859      	ldr	r1, [r3, #4]
 8001414:	460b      	mov	r3, r1
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	440b      	add	r3, r1
 800141a:	fbb0 f3f3 	udiv	r3, r0, r3
 800141e:	3301      	adds	r3, #1
 8001420:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001424:	2b00      	cmp	r3, #0
 8001426:	bf0c      	ite	eq
 8001428:	2301      	moveq	r3, #1
 800142a:	2300      	movne	r3, #0
 800142c:	b2db      	uxtb	r3, r3
 800142e:	e012      	b.n	8001456 <HAL_I2C_Init+0x176>
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	1e58      	subs	r0, r3, #1
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6859      	ldr	r1, [r3, #4]
 8001438:	460b      	mov	r3, r1
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	440b      	add	r3, r1
 800143e:	0099      	lsls	r1, r3, #2
 8001440:	440b      	add	r3, r1
 8001442:	fbb0 f3f3 	udiv	r3, r0, r3
 8001446:	3301      	adds	r3, #1
 8001448:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800144c:	2b00      	cmp	r3, #0
 800144e:	bf0c      	ite	eq
 8001450:	2301      	moveq	r3, #1
 8001452:	2300      	movne	r3, #0
 8001454:	b2db      	uxtb	r3, r3
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <HAL_I2C_Init+0x17e>
 800145a:	2301      	movs	r3, #1
 800145c:	e022      	b.n	80014a4 <HAL_I2C_Init+0x1c4>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d10e      	bne.n	8001484 <HAL_I2C_Init+0x1a4>
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	1e58      	subs	r0, r3, #1
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6859      	ldr	r1, [r3, #4]
 800146e:	460b      	mov	r3, r1
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	440b      	add	r3, r1
 8001474:	fbb0 f3f3 	udiv	r3, r0, r3
 8001478:	3301      	adds	r3, #1
 800147a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800147e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001482:	e00f      	b.n	80014a4 <HAL_I2C_Init+0x1c4>
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	1e58      	subs	r0, r3, #1
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6859      	ldr	r1, [r3, #4]
 800148c:	460b      	mov	r3, r1
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	440b      	add	r3, r1
 8001492:	0099      	lsls	r1, r3, #2
 8001494:	440b      	add	r3, r1
 8001496:	fbb0 f3f3 	udiv	r3, r0, r3
 800149a:	3301      	adds	r3, #1
 800149c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014a4:	6879      	ldr	r1, [r7, #4]
 80014a6:	6809      	ldr	r1, [r1, #0]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	69da      	ldr	r2, [r3, #28]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6a1b      	ldr	r3, [r3, #32]
 80014be:	431a      	orrs	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	430a      	orrs	r2, r1
 80014c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80014d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	6911      	ldr	r1, [r2, #16]
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	68d2      	ldr	r2, [r2, #12]
 80014de:	4311      	orrs	r1, r2
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	6812      	ldr	r2, [r2, #0]
 80014e4:	430b      	orrs	r3, r1
 80014e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	68db      	ldr	r3, [r3, #12]
 80014ee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	695a      	ldr	r2, [r3, #20]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	699b      	ldr	r3, [r3, #24]
 80014fa:	431a      	orrs	r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	430a      	orrs	r2, r1
 8001502:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f042 0201 	orr.w	r2, r2, #1
 8001512:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2200      	movs	r2, #0
 8001518:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2220      	movs	r2, #32
 800151e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2200      	movs	r2, #0
 8001526:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2200      	movs	r2, #0
 800152c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001530:	2300      	movs	r3, #0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3710      	adds	r7, #16
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	000186a0 	.word	0x000186a0
 8001540:	001e847f 	.word	0x001e847f
 8001544:	003d08ff 	.word	0x003d08ff
 8001548:	431bde83 	.word	0x431bde83
 800154c:	10624dd3 	.word	0x10624dd3

08001550 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8001554:	4b03      	ldr	r3, [pc, #12]	; (8001564 <HAL_PWR_EnableBkUpAccess+0x14>)
 8001556:	2201      	movs	r2, #1
 8001558:	601a      	str	r2, [r3, #0]
}
 800155a:	bf00      	nop
 800155c:	46bd      	mov	sp, r7
 800155e:	bc80      	pop	{r7}
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	420e0020 	.word	0x420e0020

08001568 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d101      	bne.n	800157a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e26c      	b.n	8001a54 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	2b00      	cmp	r3, #0
 8001584:	f000 8087 	beq.w	8001696 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001588:	4b92      	ldr	r3, [pc, #584]	; (80017d4 <HAL_RCC_OscConfig+0x26c>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f003 030c 	and.w	r3, r3, #12
 8001590:	2b04      	cmp	r3, #4
 8001592:	d00c      	beq.n	80015ae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001594:	4b8f      	ldr	r3, [pc, #572]	; (80017d4 <HAL_RCC_OscConfig+0x26c>)
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f003 030c 	and.w	r3, r3, #12
 800159c:	2b08      	cmp	r3, #8
 800159e:	d112      	bne.n	80015c6 <HAL_RCC_OscConfig+0x5e>
 80015a0:	4b8c      	ldr	r3, [pc, #560]	; (80017d4 <HAL_RCC_OscConfig+0x26c>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015ac:	d10b      	bne.n	80015c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015ae:	4b89      	ldr	r3, [pc, #548]	; (80017d4 <HAL_RCC_OscConfig+0x26c>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d06c      	beq.n	8001694 <HAL_RCC_OscConfig+0x12c>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d168      	bne.n	8001694 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e246      	b.n	8001a54 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015ce:	d106      	bne.n	80015de <HAL_RCC_OscConfig+0x76>
 80015d0:	4b80      	ldr	r3, [pc, #512]	; (80017d4 <HAL_RCC_OscConfig+0x26c>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a7f      	ldr	r2, [pc, #508]	; (80017d4 <HAL_RCC_OscConfig+0x26c>)
 80015d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015da:	6013      	str	r3, [r2, #0]
 80015dc:	e02e      	b.n	800163c <HAL_RCC_OscConfig+0xd4>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d10c      	bne.n	8001600 <HAL_RCC_OscConfig+0x98>
 80015e6:	4b7b      	ldr	r3, [pc, #492]	; (80017d4 <HAL_RCC_OscConfig+0x26c>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a7a      	ldr	r2, [pc, #488]	; (80017d4 <HAL_RCC_OscConfig+0x26c>)
 80015ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015f0:	6013      	str	r3, [r2, #0]
 80015f2:	4b78      	ldr	r3, [pc, #480]	; (80017d4 <HAL_RCC_OscConfig+0x26c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a77      	ldr	r2, [pc, #476]	; (80017d4 <HAL_RCC_OscConfig+0x26c>)
 80015f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015fc:	6013      	str	r3, [r2, #0]
 80015fe:	e01d      	b.n	800163c <HAL_RCC_OscConfig+0xd4>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001608:	d10c      	bne.n	8001624 <HAL_RCC_OscConfig+0xbc>
 800160a:	4b72      	ldr	r3, [pc, #456]	; (80017d4 <HAL_RCC_OscConfig+0x26c>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a71      	ldr	r2, [pc, #452]	; (80017d4 <HAL_RCC_OscConfig+0x26c>)
 8001610:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001614:	6013      	str	r3, [r2, #0]
 8001616:	4b6f      	ldr	r3, [pc, #444]	; (80017d4 <HAL_RCC_OscConfig+0x26c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a6e      	ldr	r2, [pc, #440]	; (80017d4 <HAL_RCC_OscConfig+0x26c>)
 800161c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001620:	6013      	str	r3, [r2, #0]
 8001622:	e00b      	b.n	800163c <HAL_RCC_OscConfig+0xd4>
 8001624:	4b6b      	ldr	r3, [pc, #428]	; (80017d4 <HAL_RCC_OscConfig+0x26c>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a6a      	ldr	r2, [pc, #424]	; (80017d4 <HAL_RCC_OscConfig+0x26c>)
 800162a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800162e:	6013      	str	r3, [r2, #0]
 8001630:	4b68      	ldr	r3, [pc, #416]	; (80017d4 <HAL_RCC_OscConfig+0x26c>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a67      	ldr	r2, [pc, #412]	; (80017d4 <HAL_RCC_OscConfig+0x26c>)
 8001636:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800163a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d013      	beq.n	800166c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001644:	f7ff fbba 	bl	8000dbc <HAL_GetTick>
 8001648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800164a:	e008      	b.n	800165e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800164c:	f7ff fbb6 	bl	8000dbc <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b64      	cmp	r3, #100	; 0x64
 8001658:	d901      	bls.n	800165e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e1fa      	b.n	8001a54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800165e:	4b5d      	ldr	r3, [pc, #372]	; (80017d4 <HAL_RCC_OscConfig+0x26c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d0f0      	beq.n	800164c <HAL_RCC_OscConfig+0xe4>
 800166a:	e014      	b.n	8001696 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166c:	f7ff fba6 	bl	8000dbc <HAL_GetTick>
 8001670:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001674:	f7ff fba2 	bl	8000dbc <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b64      	cmp	r3, #100	; 0x64
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e1e6      	b.n	8001a54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001686:	4b53      	ldr	r3, [pc, #332]	; (80017d4 <HAL_RCC_OscConfig+0x26c>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d1f0      	bne.n	8001674 <HAL_RCC_OscConfig+0x10c>
 8001692:	e000      	b.n	8001696 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001694:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d063      	beq.n	800176a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016a2:	4b4c      	ldr	r3, [pc, #304]	; (80017d4 <HAL_RCC_OscConfig+0x26c>)
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f003 030c 	and.w	r3, r3, #12
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d00b      	beq.n	80016c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80016ae:	4b49      	ldr	r3, [pc, #292]	; (80017d4 <HAL_RCC_OscConfig+0x26c>)
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f003 030c 	and.w	r3, r3, #12
 80016b6:	2b08      	cmp	r3, #8
 80016b8:	d11c      	bne.n	80016f4 <HAL_RCC_OscConfig+0x18c>
 80016ba:	4b46      	ldr	r3, [pc, #280]	; (80017d4 <HAL_RCC_OscConfig+0x26c>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d116      	bne.n	80016f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016c6:	4b43      	ldr	r3, [pc, #268]	; (80017d4 <HAL_RCC_OscConfig+0x26c>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d005      	beq.n	80016de <HAL_RCC_OscConfig+0x176>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	691b      	ldr	r3, [r3, #16]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d001      	beq.n	80016de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e1ba      	b.n	8001a54 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016de:	4b3d      	ldr	r3, [pc, #244]	; (80017d4 <HAL_RCC_OscConfig+0x26c>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	695b      	ldr	r3, [r3, #20]
 80016ea:	00db      	lsls	r3, r3, #3
 80016ec:	4939      	ldr	r1, [pc, #228]	; (80017d4 <HAL_RCC_OscConfig+0x26c>)
 80016ee:	4313      	orrs	r3, r2
 80016f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016f2:	e03a      	b.n	800176a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	691b      	ldr	r3, [r3, #16]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d020      	beq.n	800173e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016fc:	4b36      	ldr	r3, [pc, #216]	; (80017d8 <HAL_RCC_OscConfig+0x270>)
 80016fe:	2201      	movs	r2, #1
 8001700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001702:	f7ff fb5b 	bl	8000dbc <HAL_GetTick>
 8001706:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001708:	e008      	b.n	800171c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800170a:	f7ff fb57 	bl	8000dbc <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	2b02      	cmp	r3, #2
 8001716:	d901      	bls.n	800171c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e19b      	b.n	8001a54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800171c:	4b2d      	ldr	r3, [pc, #180]	; (80017d4 <HAL_RCC_OscConfig+0x26c>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0302 	and.w	r3, r3, #2
 8001724:	2b00      	cmp	r3, #0
 8001726:	d0f0      	beq.n	800170a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001728:	4b2a      	ldr	r3, [pc, #168]	; (80017d4 <HAL_RCC_OscConfig+0x26c>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	695b      	ldr	r3, [r3, #20]
 8001734:	00db      	lsls	r3, r3, #3
 8001736:	4927      	ldr	r1, [pc, #156]	; (80017d4 <HAL_RCC_OscConfig+0x26c>)
 8001738:	4313      	orrs	r3, r2
 800173a:	600b      	str	r3, [r1, #0]
 800173c:	e015      	b.n	800176a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800173e:	4b26      	ldr	r3, [pc, #152]	; (80017d8 <HAL_RCC_OscConfig+0x270>)
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001744:	f7ff fb3a 	bl	8000dbc <HAL_GetTick>
 8001748:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800174a:	e008      	b.n	800175e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800174c:	f7ff fb36 	bl	8000dbc <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	2b02      	cmp	r3, #2
 8001758:	d901      	bls.n	800175e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e17a      	b.n	8001a54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800175e:	4b1d      	ldr	r3, [pc, #116]	; (80017d4 <HAL_RCC_OscConfig+0x26c>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	2b00      	cmp	r3, #0
 8001768:	d1f0      	bne.n	800174c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0308 	and.w	r3, r3, #8
 8001772:	2b00      	cmp	r3, #0
 8001774:	d03a      	beq.n	80017ec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	699b      	ldr	r3, [r3, #24]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d019      	beq.n	80017b2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800177e:	4b17      	ldr	r3, [pc, #92]	; (80017dc <HAL_RCC_OscConfig+0x274>)
 8001780:	2201      	movs	r2, #1
 8001782:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001784:	f7ff fb1a 	bl	8000dbc <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800178c:	f7ff fb16 	bl	8000dbc <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b02      	cmp	r3, #2
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e15a      	b.n	8001a54 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800179e:	4b0d      	ldr	r3, [pc, #52]	; (80017d4 <HAL_RCC_OscConfig+0x26c>)
 80017a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d0f0      	beq.n	800178c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80017aa:	2001      	movs	r0, #1
 80017ac:	f000 fada 	bl	8001d64 <RCC_Delay>
 80017b0:	e01c      	b.n	80017ec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017b2:	4b0a      	ldr	r3, [pc, #40]	; (80017dc <HAL_RCC_OscConfig+0x274>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017b8:	f7ff fb00 	bl	8000dbc <HAL_GetTick>
 80017bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017be:	e00f      	b.n	80017e0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017c0:	f7ff fafc 	bl	8000dbc <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d908      	bls.n	80017e0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e140      	b.n	8001a54 <HAL_RCC_OscConfig+0x4ec>
 80017d2:	bf00      	nop
 80017d4:	40021000 	.word	0x40021000
 80017d8:	42420000 	.word	0x42420000
 80017dc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017e0:	4b9e      	ldr	r3, [pc, #632]	; (8001a5c <HAL_RCC_OscConfig+0x4f4>)
 80017e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e4:	f003 0302 	and.w	r3, r3, #2
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d1e9      	bne.n	80017c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0304 	and.w	r3, r3, #4
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	f000 80a6 	beq.w	8001946 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017fa:	2300      	movs	r3, #0
 80017fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017fe:	4b97      	ldr	r3, [pc, #604]	; (8001a5c <HAL_RCC_OscConfig+0x4f4>)
 8001800:	69db      	ldr	r3, [r3, #28]
 8001802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d10d      	bne.n	8001826 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800180a:	4b94      	ldr	r3, [pc, #592]	; (8001a5c <HAL_RCC_OscConfig+0x4f4>)
 800180c:	69db      	ldr	r3, [r3, #28]
 800180e:	4a93      	ldr	r2, [pc, #588]	; (8001a5c <HAL_RCC_OscConfig+0x4f4>)
 8001810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001814:	61d3      	str	r3, [r2, #28]
 8001816:	4b91      	ldr	r3, [pc, #580]	; (8001a5c <HAL_RCC_OscConfig+0x4f4>)
 8001818:	69db      	ldr	r3, [r3, #28]
 800181a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181e:	60bb      	str	r3, [r7, #8]
 8001820:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001822:	2301      	movs	r3, #1
 8001824:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001826:	4b8e      	ldr	r3, [pc, #568]	; (8001a60 <HAL_RCC_OscConfig+0x4f8>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800182e:	2b00      	cmp	r3, #0
 8001830:	d118      	bne.n	8001864 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001832:	4b8b      	ldr	r3, [pc, #556]	; (8001a60 <HAL_RCC_OscConfig+0x4f8>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a8a      	ldr	r2, [pc, #552]	; (8001a60 <HAL_RCC_OscConfig+0x4f8>)
 8001838:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800183c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800183e:	f7ff fabd 	bl	8000dbc <HAL_GetTick>
 8001842:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001844:	e008      	b.n	8001858 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001846:	f7ff fab9 	bl	8000dbc <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	2b64      	cmp	r3, #100	; 0x64
 8001852:	d901      	bls.n	8001858 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e0fd      	b.n	8001a54 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001858:	4b81      	ldr	r3, [pc, #516]	; (8001a60 <HAL_RCC_OscConfig+0x4f8>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001860:	2b00      	cmp	r3, #0
 8001862:	d0f0      	beq.n	8001846 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d106      	bne.n	800187a <HAL_RCC_OscConfig+0x312>
 800186c:	4b7b      	ldr	r3, [pc, #492]	; (8001a5c <HAL_RCC_OscConfig+0x4f4>)
 800186e:	6a1b      	ldr	r3, [r3, #32]
 8001870:	4a7a      	ldr	r2, [pc, #488]	; (8001a5c <HAL_RCC_OscConfig+0x4f4>)
 8001872:	f043 0301 	orr.w	r3, r3, #1
 8001876:	6213      	str	r3, [r2, #32]
 8001878:	e02d      	b.n	80018d6 <HAL_RCC_OscConfig+0x36e>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	68db      	ldr	r3, [r3, #12]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d10c      	bne.n	800189c <HAL_RCC_OscConfig+0x334>
 8001882:	4b76      	ldr	r3, [pc, #472]	; (8001a5c <HAL_RCC_OscConfig+0x4f4>)
 8001884:	6a1b      	ldr	r3, [r3, #32]
 8001886:	4a75      	ldr	r2, [pc, #468]	; (8001a5c <HAL_RCC_OscConfig+0x4f4>)
 8001888:	f023 0301 	bic.w	r3, r3, #1
 800188c:	6213      	str	r3, [r2, #32]
 800188e:	4b73      	ldr	r3, [pc, #460]	; (8001a5c <HAL_RCC_OscConfig+0x4f4>)
 8001890:	6a1b      	ldr	r3, [r3, #32]
 8001892:	4a72      	ldr	r2, [pc, #456]	; (8001a5c <HAL_RCC_OscConfig+0x4f4>)
 8001894:	f023 0304 	bic.w	r3, r3, #4
 8001898:	6213      	str	r3, [r2, #32]
 800189a:	e01c      	b.n	80018d6 <HAL_RCC_OscConfig+0x36e>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	2b05      	cmp	r3, #5
 80018a2:	d10c      	bne.n	80018be <HAL_RCC_OscConfig+0x356>
 80018a4:	4b6d      	ldr	r3, [pc, #436]	; (8001a5c <HAL_RCC_OscConfig+0x4f4>)
 80018a6:	6a1b      	ldr	r3, [r3, #32]
 80018a8:	4a6c      	ldr	r2, [pc, #432]	; (8001a5c <HAL_RCC_OscConfig+0x4f4>)
 80018aa:	f043 0304 	orr.w	r3, r3, #4
 80018ae:	6213      	str	r3, [r2, #32]
 80018b0:	4b6a      	ldr	r3, [pc, #424]	; (8001a5c <HAL_RCC_OscConfig+0x4f4>)
 80018b2:	6a1b      	ldr	r3, [r3, #32]
 80018b4:	4a69      	ldr	r2, [pc, #420]	; (8001a5c <HAL_RCC_OscConfig+0x4f4>)
 80018b6:	f043 0301 	orr.w	r3, r3, #1
 80018ba:	6213      	str	r3, [r2, #32]
 80018bc:	e00b      	b.n	80018d6 <HAL_RCC_OscConfig+0x36e>
 80018be:	4b67      	ldr	r3, [pc, #412]	; (8001a5c <HAL_RCC_OscConfig+0x4f4>)
 80018c0:	6a1b      	ldr	r3, [r3, #32]
 80018c2:	4a66      	ldr	r2, [pc, #408]	; (8001a5c <HAL_RCC_OscConfig+0x4f4>)
 80018c4:	f023 0301 	bic.w	r3, r3, #1
 80018c8:	6213      	str	r3, [r2, #32]
 80018ca:	4b64      	ldr	r3, [pc, #400]	; (8001a5c <HAL_RCC_OscConfig+0x4f4>)
 80018cc:	6a1b      	ldr	r3, [r3, #32]
 80018ce:	4a63      	ldr	r2, [pc, #396]	; (8001a5c <HAL_RCC_OscConfig+0x4f4>)
 80018d0:	f023 0304 	bic.w	r3, r3, #4
 80018d4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d015      	beq.n	800190a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018de:	f7ff fa6d 	bl	8000dbc <HAL_GetTick>
 80018e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018e4:	e00a      	b.n	80018fc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018e6:	f7ff fa69 	bl	8000dbc <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d901      	bls.n	80018fc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	e0ab      	b.n	8001a54 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018fc:	4b57      	ldr	r3, [pc, #348]	; (8001a5c <HAL_RCC_OscConfig+0x4f4>)
 80018fe:	6a1b      	ldr	r3, [r3, #32]
 8001900:	f003 0302 	and.w	r3, r3, #2
 8001904:	2b00      	cmp	r3, #0
 8001906:	d0ee      	beq.n	80018e6 <HAL_RCC_OscConfig+0x37e>
 8001908:	e014      	b.n	8001934 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800190a:	f7ff fa57 	bl	8000dbc <HAL_GetTick>
 800190e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001910:	e00a      	b.n	8001928 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001912:	f7ff fa53 	bl	8000dbc <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001920:	4293      	cmp	r3, r2
 8001922:	d901      	bls.n	8001928 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e095      	b.n	8001a54 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001928:	4b4c      	ldr	r3, [pc, #304]	; (8001a5c <HAL_RCC_OscConfig+0x4f4>)
 800192a:	6a1b      	ldr	r3, [r3, #32]
 800192c:	f003 0302 	and.w	r3, r3, #2
 8001930:	2b00      	cmp	r3, #0
 8001932:	d1ee      	bne.n	8001912 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001934:	7dfb      	ldrb	r3, [r7, #23]
 8001936:	2b01      	cmp	r3, #1
 8001938:	d105      	bne.n	8001946 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800193a:	4b48      	ldr	r3, [pc, #288]	; (8001a5c <HAL_RCC_OscConfig+0x4f4>)
 800193c:	69db      	ldr	r3, [r3, #28]
 800193e:	4a47      	ldr	r2, [pc, #284]	; (8001a5c <HAL_RCC_OscConfig+0x4f4>)
 8001940:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001944:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	69db      	ldr	r3, [r3, #28]
 800194a:	2b00      	cmp	r3, #0
 800194c:	f000 8081 	beq.w	8001a52 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001950:	4b42      	ldr	r3, [pc, #264]	; (8001a5c <HAL_RCC_OscConfig+0x4f4>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f003 030c 	and.w	r3, r3, #12
 8001958:	2b08      	cmp	r3, #8
 800195a:	d061      	beq.n	8001a20 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	69db      	ldr	r3, [r3, #28]
 8001960:	2b02      	cmp	r3, #2
 8001962:	d146      	bne.n	80019f2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001964:	4b3f      	ldr	r3, [pc, #252]	; (8001a64 <HAL_RCC_OscConfig+0x4fc>)
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800196a:	f7ff fa27 	bl	8000dbc <HAL_GetTick>
 800196e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001970:	e008      	b.n	8001984 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001972:	f7ff fa23 	bl	8000dbc <HAL_GetTick>
 8001976:	4602      	mov	r2, r0
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	2b02      	cmp	r3, #2
 800197e:	d901      	bls.n	8001984 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e067      	b.n	8001a54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001984:	4b35      	ldr	r3, [pc, #212]	; (8001a5c <HAL_RCC_OscConfig+0x4f4>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d1f0      	bne.n	8001972 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6a1b      	ldr	r3, [r3, #32]
 8001994:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001998:	d108      	bne.n	80019ac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800199a:	4b30      	ldr	r3, [pc, #192]	; (8001a5c <HAL_RCC_OscConfig+0x4f4>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	492d      	ldr	r1, [pc, #180]	; (8001a5c <HAL_RCC_OscConfig+0x4f4>)
 80019a8:	4313      	orrs	r3, r2
 80019aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019ac:	4b2b      	ldr	r3, [pc, #172]	; (8001a5c <HAL_RCC_OscConfig+0x4f4>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6a19      	ldr	r1, [r3, #32]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019bc:	430b      	orrs	r3, r1
 80019be:	4927      	ldr	r1, [pc, #156]	; (8001a5c <HAL_RCC_OscConfig+0x4f4>)
 80019c0:	4313      	orrs	r3, r2
 80019c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019c4:	4b27      	ldr	r3, [pc, #156]	; (8001a64 <HAL_RCC_OscConfig+0x4fc>)
 80019c6:	2201      	movs	r2, #1
 80019c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ca:	f7ff f9f7 	bl	8000dbc <HAL_GetTick>
 80019ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019d0:	e008      	b.n	80019e4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019d2:	f7ff f9f3 	bl	8000dbc <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d901      	bls.n	80019e4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e037      	b.n	8001a54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019e4:	4b1d      	ldr	r3, [pc, #116]	; (8001a5c <HAL_RCC_OscConfig+0x4f4>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d0f0      	beq.n	80019d2 <HAL_RCC_OscConfig+0x46a>
 80019f0:	e02f      	b.n	8001a52 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019f2:	4b1c      	ldr	r3, [pc, #112]	; (8001a64 <HAL_RCC_OscConfig+0x4fc>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f8:	f7ff f9e0 	bl	8000dbc <HAL_GetTick>
 80019fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019fe:	e008      	b.n	8001a12 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a00:	f7ff f9dc 	bl	8000dbc <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e020      	b.n	8001a54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a12:	4b12      	ldr	r3, [pc, #72]	; (8001a5c <HAL_RCC_OscConfig+0x4f4>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d1f0      	bne.n	8001a00 <HAL_RCC_OscConfig+0x498>
 8001a1e:	e018      	b.n	8001a52 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	69db      	ldr	r3, [r3, #28]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d101      	bne.n	8001a2c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e013      	b.n	8001a54 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a2c:	4b0b      	ldr	r3, [pc, #44]	; (8001a5c <HAL_RCC_OscConfig+0x4f4>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6a1b      	ldr	r3, [r3, #32]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d106      	bne.n	8001a4e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d001      	beq.n	8001a52 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e000      	b.n	8001a54 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001a52:	2300      	movs	r3, #0
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3718      	adds	r7, #24
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	40007000 	.word	0x40007000
 8001a64:	42420060 	.word	0x42420060

08001a68 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d101      	bne.n	8001a7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e0d0      	b.n	8001c1e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a7c:	4b6a      	ldr	r3, [pc, #424]	; (8001c28 <HAL_RCC_ClockConfig+0x1c0>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0307 	and.w	r3, r3, #7
 8001a84:	683a      	ldr	r2, [r7, #0]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d910      	bls.n	8001aac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a8a:	4b67      	ldr	r3, [pc, #412]	; (8001c28 <HAL_RCC_ClockConfig+0x1c0>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f023 0207 	bic.w	r2, r3, #7
 8001a92:	4965      	ldr	r1, [pc, #404]	; (8001c28 <HAL_RCC_ClockConfig+0x1c0>)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a9a:	4b63      	ldr	r3, [pc, #396]	; (8001c28 <HAL_RCC_ClockConfig+0x1c0>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0307 	and.w	r3, r3, #7
 8001aa2:	683a      	ldr	r2, [r7, #0]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d001      	beq.n	8001aac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e0b8      	b.n	8001c1e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0302 	and.w	r3, r3, #2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d020      	beq.n	8001afa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0304 	and.w	r3, r3, #4
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d005      	beq.n	8001ad0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ac4:	4b59      	ldr	r3, [pc, #356]	; (8001c2c <HAL_RCC_ClockConfig+0x1c4>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	4a58      	ldr	r2, [pc, #352]	; (8001c2c <HAL_RCC_ClockConfig+0x1c4>)
 8001aca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ace:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0308 	and.w	r3, r3, #8
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d005      	beq.n	8001ae8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001adc:	4b53      	ldr	r3, [pc, #332]	; (8001c2c <HAL_RCC_ClockConfig+0x1c4>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	4a52      	ldr	r2, [pc, #328]	; (8001c2c <HAL_RCC_ClockConfig+0x1c4>)
 8001ae2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001ae6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ae8:	4b50      	ldr	r3, [pc, #320]	; (8001c2c <HAL_RCC_ClockConfig+0x1c4>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	494d      	ldr	r1, [pc, #308]	; (8001c2c <HAL_RCC_ClockConfig+0x1c4>)
 8001af6:	4313      	orrs	r3, r2
 8001af8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d040      	beq.n	8001b88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d107      	bne.n	8001b1e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b0e:	4b47      	ldr	r3, [pc, #284]	; (8001c2c <HAL_RCC_ClockConfig+0x1c4>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d115      	bne.n	8001b46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e07f      	b.n	8001c1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d107      	bne.n	8001b36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b26:	4b41      	ldr	r3, [pc, #260]	; (8001c2c <HAL_RCC_ClockConfig+0x1c4>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d109      	bne.n	8001b46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e073      	b.n	8001c1e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b36:	4b3d      	ldr	r3, [pc, #244]	; (8001c2c <HAL_RCC_ClockConfig+0x1c4>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d101      	bne.n	8001b46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e06b      	b.n	8001c1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b46:	4b39      	ldr	r3, [pc, #228]	; (8001c2c <HAL_RCC_ClockConfig+0x1c4>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f023 0203 	bic.w	r2, r3, #3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	4936      	ldr	r1, [pc, #216]	; (8001c2c <HAL_RCC_ClockConfig+0x1c4>)
 8001b54:	4313      	orrs	r3, r2
 8001b56:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b58:	f7ff f930 	bl	8000dbc <HAL_GetTick>
 8001b5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b5e:	e00a      	b.n	8001b76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b60:	f7ff f92c 	bl	8000dbc <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e053      	b.n	8001c1e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b76:	4b2d      	ldr	r3, [pc, #180]	; (8001c2c <HAL_RCC_ClockConfig+0x1c4>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f003 020c 	and.w	r2, r3, #12
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d1eb      	bne.n	8001b60 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b88:	4b27      	ldr	r3, [pc, #156]	; (8001c28 <HAL_RCC_ClockConfig+0x1c0>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0307 	and.w	r3, r3, #7
 8001b90:	683a      	ldr	r2, [r7, #0]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d210      	bcs.n	8001bb8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b96:	4b24      	ldr	r3, [pc, #144]	; (8001c28 <HAL_RCC_ClockConfig+0x1c0>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f023 0207 	bic.w	r2, r3, #7
 8001b9e:	4922      	ldr	r1, [pc, #136]	; (8001c28 <HAL_RCC_ClockConfig+0x1c0>)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ba6:	4b20      	ldr	r3, [pc, #128]	; (8001c28 <HAL_RCC_ClockConfig+0x1c0>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	683a      	ldr	r2, [r7, #0]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d001      	beq.n	8001bb8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e032      	b.n	8001c1e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0304 	and.w	r3, r3, #4
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d008      	beq.n	8001bd6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bc4:	4b19      	ldr	r3, [pc, #100]	; (8001c2c <HAL_RCC_ClockConfig+0x1c4>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	4916      	ldr	r1, [pc, #88]	; (8001c2c <HAL_RCC_ClockConfig+0x1c4>)
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0308 	and.w	r3, r3, #8
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d009      	beq.n	8001bf6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001be2:	4b12      	ldr	r3, [pc, #72]	; (8001c2c <HAL_RCC_ClockConfig+0x1c4>)
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	490e      	ldr	r1, [pc, #56]	; (8001c2c <HAL_RCC_ClockConfig+0x1c4>)
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001bf6:	f000 f821 	bl	8001c3c <HAL_RCC_GetSysClockFreq>
 8001bfa:	4601      	mov	r1, r0
 8001bfc:	4b0b      	ldr	r3, [pc, #44]	; (8001c2c <HAL_RCC_ClockConfig+0x1c4>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	091b      	lsrs	r3, r3, #4
 8001c02:	f003 030f 	and.w	r3, r3, #15
 8001c06:	4a0a      	ldr	r2, [pc, #40]	; (8001c30 <HAL_RCC_ClockConfig+0x1c8>)
 8001c08:	5cd3      	ldrb	r3, [r2, r3]
 8001c0a:	fa21 f303 	lsr.w	r3, r1, r3
 8001c0e:	4a09      	ldr	r2, [pc, #36]	; (8001c34 <HAL_RCC_ClockConfig+0x1cc>)
 8001c10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c12:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <HAL_RCC_ClockConfig+0x1d0>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7ff f88e 	bl	8000d38 <HAL_InitTick>

  return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3710      	adds	r7, #16
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40022000 	.word	0x40022000
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	080035ac 	.word	0x080035ac
 8001c34:	20000000 	.word	0x20000000
 8001c38:	20000004 	.word	0x20000004

08001c3c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c3c:	b490      	push	{r4, r7}
 8001c3e:	b08a      	sub	sp, #40	; 0x28
 8001c40:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001c42:	4b2a      	ldr	r3, [pc, #168]	; (8001cec <HAL_RCC_GetSysClockFreq+0xb0>)
 8001c44:	1d3c      	adds	r4, r7, #4
 8001c46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001c4c:	4b28      	ldr	r3, [pc, #160]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c4e:	881b      	ldrh	r3, [r3, #0]
 8001c50:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c52:	2300      	movs	r3, #0
 8001c54:	61fb      	str	r3, [r7, #28]
 8001c56:	2300      	movs	r3, #0
 8001c58:	61bb      	str	r3, [r7, #24]
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c5e:	2300      	movs	r3, #0
 8001c60:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001c62:	2300      	movs	r3, #0
 8001c64:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c66:	4b23      	ldr	r3, [pc, #140]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	f003 030c 	and.w	r3, r3, #12
 8001c72:	2b04      	cmp	r3, #4
 8001c74:	d002      	beq.n	8001c7c <HAL_RCC_GetSysClockFreq+0x40>
 8001c76:	2b08      	cmp	r3, #8
 8001c78:	d003      	beq.n	8001c82 <HAL_RCC_GetSysClockFreq+0x46>
 8001c7a:	e02d      	b.n	8001cd8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c7c:	4b1e      	ldr	r3, [pc, #120]	; (8001cf8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c7e:	623b      	str	r3, [r7, #32]
      break;
 8001c80:	e02d      	b.n	8001cde <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	0c9b      	lsrs	r3, r3, #18
 8001c86:	f003 030f 	and.w	r3, r3, #15
 8001c8a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c8e:	4413      	add	r3, r2
 8001c90:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001c94:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d013      	beq.n	8001cc8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ca0:	4b14      	ldr	r3, [pc, #80]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	0c5b      	lsrs	r3, r3, #17
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001cae:	4413      	add	r3, r2
 8001cb0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001cb4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	4a0f      	ldr	r2, [pc, #60]	; (8001cf8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001cba:	fb02 f203 	mul.w	r2, r2, r3
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cc4:	627b      	str	r3, [r7, #36]	; 0x24
 8001cc6:	e004      	b.n	8001cd2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	4a0c      	ldr	r2, [pc, #48]	; (8001cfc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ccc:	fb02 f303 	mul.w	r3, r2, r3
 8001cd0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd4:	623b      	str	r3, [r7, #32]
      break;
 8001cd6:	e002      	b.n	8001cde <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001cd8:	4b07      	ldr	r3, [pc, #28]	; (8001cf8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001cda:	623b      	str	r3, [r7, #32]
      break;
 8001cdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cde:	6a3b      	ldr	r3, [r7, #32]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3728      	adds	r7, #40	; 0x28
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bc90      	pop	{r4, r7}
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	08003584 	.word	0x08003584
 8001cf0:	08003594 	.word	0x08003594
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	007a1200 	.word	0x007a1200
 8001cfc:	003d0900 	.word	0x003d0900

08001d00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d04:	4b02      	ldr	r3, [pc, #8]	; (8001d10 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d06:	681b      	ldr	r3, [r3, #0]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bc80      	pop	{r7}
 8001d0e:	4770      	bx	lr
 8001d10:	20000000 	.word	0x20000000

08001d14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d18:	f7ff fff2 	bl	8001d00 <HAL_RCC_GetHCLKFreq>
 8001d1c:	4601      	mov	r1, r0
 8001d1e:	4b05      	ldr	r3, [pc, #20]	; (8001d34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	0a1b      	lsrs	r3, r3, #8
 8001d24:	f003 0307 	and.w	r3, r3, #7
 8001d28:	4a03      	ldr	r2, [pc, #12]	; (8001d38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d2a:	5cd3      	ldrb	r3, [r2, r3]
 8001d2c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	40021000 	.word	0x40021000
 8001d38:	080035bc 	.word	0x080035bc

08001d3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d40:	f7ff ffde 	bl	8001d00 <HAL_RCC_GetHCLKFreq>
 8001d44:	4601      	mov	r1, r0
 8001d46:	4b05      	ldr	r3, [pc, #20]	; (8001d5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	0adb      	lsrs	r3, r3, #11
 8001d4c:	f003 0307 	and.w	r3, r3, #7
 8001d50:	4a03      	ldr	r2, [pc, #12]	; (8001d60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d52:	5cd3      	ldrb	r3, [r2, r3]
 8001d54:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	080035bc 	.word	0x080035bc

08001d64 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d6c:	4b0a      	ldr	r3, [pc, #40]	; (8001d98 <RCC_Delay+0x34>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a0a      	ldr	r2, [pc, #40]	; (8001d9c <RCC_Delay+0x38>)
 8001d72:	fba2 2303 	umull	r2, r3, r2, r3
 8001d76:	0a5b      	lsrs	r3, r3, #9
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	fb02 f303 	mul.w	r3, r2, r3
 8001d7e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d80:	bf00      	nop
  }
  while (Delay --);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	1e5a      	subs	r2, r3, #1
 8001d86:	60fa      	str	r2, [r7, #12]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d1f9      	bne.n	8001d80 <RCC_Delay+0x1c>
}
 8001d8c:	bf00      	nop
 8001d8e:	3714      	adds	r7, #20
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bc80      	pop	{r7}
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	20000000 	.word	0x20000000
 8001d9c:	10624dd3 	.word	0x10624dd3

08001da0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001da8:	2300      	movs	r3, #0
 8001daa:	613b      	str	r3, [r7, #16]
 8001dac:	2300      	movs	r3, #0
 8001dae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0301 	and.w	r3, r3, #1
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d07d      	beq.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dc0:	4b4f      	ldr	r3, [pc, #316]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dc2:	69db      	ldr	r3, [r3, #28]
 8001dc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d10d      	bne.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dcc:	4b4c      	ldr	r3, [pc, #304]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dce:	69db      	ldr	r3, [r3, #28]
 8001dd0:	4a4b      	ldr	r2, [pc, #300]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dd6:	61d3      	str	r3, [r2, #28]
 8001dd8:	4b49      	ldr	r3, [pc, #292]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dda:	69db      	ldr	r3, [r3, #28]
 8001ddc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de0:	60bb      	str	r3, [r7, #8]
 8001de2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001de4:	2301      	movs	r3, #1
 8001de6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de8:	4b46      	ldr	r3, [pc, #280]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d118      	bne.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001df4:	4b43      	ldr	r3, [pc, #268]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a42      	ldr	r2, [pc, #264]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001dfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dfe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e00:	f7fe ffdc 	bl	8000dbc <HAL_GetTick>
 8001e04:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e06:	e008      	b.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e08:	f7fe ffd8 	bl	8000dbc <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b64      	cmp	r3, #100	; 0x64
 8001e14:	d901      	bls.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e06d      	b.n	8001ef6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e1a:	4b3a      	ldr	r3, [pc, #232]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d0f0      	beq.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e26:	4b36      	ldr	r3, [pc, #216]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e28:	6a1b      	ldr	r3, [r3, #32]
 8001e2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e2e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d02e      	beq.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d027      	beq.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e44:	4b2e      	ldr	r3, [pc, #184]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e46:	6a1b      	ldr	r3, [r3, #32]
 8001e48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e4c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e4e:	4b2e      	ldr	r3, [pc, #184]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001e50:	2201      	movs	r2, #1
 8001e52:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e54:	4b2c      	ldr	r3, [pc, #176]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001e5a:	4a29      	ldr	r2, [pc, #164]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d014      	beq.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e6a:	f7fe ffa7 	bl	8000dbc <HAL_GetTick>
 8001e6e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e70:	e00a      	b.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e72:	f7fe ffa3 	bl	8000dbc <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d901      	bls.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e036      	b.n	8001ef6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e88:	4b1d      	ldr	r3, [pc, #116]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e8a:	6a1b      	ldr	r3, [r3, #32]
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d0ee      	beq.n	8001e72 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e94:	4b1a      	ldr	r3, [pc, #104]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e96:	6a1b      	ldr	r3, [r3, #32]
 8001e98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	4917      	ldr	r1, [pc, #92]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ea6:	7dfb      	ldrb	r3, [r7, #23]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d105      	bne.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eac:	4b14      	ldr	r3, [pc, #80]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eae:	69db      	ldr	r3, [r3, #28]
 8001eb0:	4a13      	ldr	r2, [pc, #76]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eb6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0302 	and.w	r3, r3, #2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d008      	beq.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001ec4:	4b0e      	ldr	r3, [pc, #56]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	490b      	ldr	r1, [pc, #44]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0310 	and.w	r3, r3, #16
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d008      	beq.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001ee2:	4b07      	ldr	r3, [pc, #28]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	4904      	ldr	r1, [pc, #16]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3718      	adds	r7, #24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	40021000 	.word	0x40021000
 8001f04:	40007000 	.word	0x40007000
 8001f08:	42420440 	.word	0x42420440

08001f0c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001f0c:	b590      	push	{r4, r7, lr}
 8001f0e:	b08d      	sub	sp, #52	; 0x34
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001f14:	4b55      	ldr	r3, [pc, #340]	; (800206c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8001f16:	f107 040c 	add.w	r4, r7, #12
 8001f1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f1c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001f20:	4b53      	ldr	r3, [pc, #332]	; (8002070 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8001f22:	881b      	ldrh	r3, [r3, #0]
 8001f24:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8001f26:	2300      	movs	r3, #0
 8001f28:	627b      	str	r3, [r7, #36]	; 0x24
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f2e:	2300      	movs	r3, #0
 8001f30:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8001f32:	2300      	movs	r3, #0
 8001f34:	61fb      	str	r3, [r7, #28]
 8001f36:	2300      	movs	r3, #0
 8001f38:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d07f      	beq.n	8002040 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8001f40:	2b10      	cmp	r3, #16
 8001f42:	d002      	beq.n	8001f4a <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d048      	beq.n	8001fda <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8001f48:	e08b      	b.n	8002062 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8001f4a:	4b4a      	ldr	r3, [pc, #296]	; (8002074 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8001f50:	4b48      	ldr	r3, [pc, #288]	; (8002074 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d07f      	beq.n	800205c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	0c9b      	lsrs	r3, r3, #18
 8001f60:	f003 030f 	and.w	r3, r3, #15
 8001f64:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001f68:	4413      	add	r3, r2
 8001f6a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001f6e:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d018      	beq.n	8001fac <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f7a:	4b3e      	ldr	r3, [pc, #248]	; (8002074 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	0c5b      	lsrs	r3, r3, #17
 8001f80:	f003 0301 	and.w	r3, r3, #1
 8001f84:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001f88:	4413      	add	r3, r2
 8001f8a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001f8e:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d00d      	beq.n	8001fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001f9a:	4a37      	ldr	r2, [pc, #220]	; (8002078 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8001f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001fa2:	6a3b      	ldr	r3, [r7, #32]
 8001fa4:	fb02 f303 	mul.w	r3, r2, r3
 8001fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001faa:	e004      	b.n	8001fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001fac:	6a3b      	ldr	r3, [r7, #32]
 8001fae:	4a33      	ldr	r2, [pc, #204]	; (800207c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001fb0:	fb02 f303 	mul.w	r3, r2, r3
 8001fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001fb6:	4b2f      	ldr	r3, [pc, #188]	; (8002074 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fc2:	d102      	bne.n	8001fca <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8001fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fc6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001fc8:	e048      	b.n	800205c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8001fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	4a2c      	ldr	r2, [pc, #176]	; (8002080 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8001fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd4:	085b      	lsrs	r3, r3, #1
 8001fd6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001fd8:	e040      	b.n	800205c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8001fda:	4b26      	ldr	r3, [pc, #152]	; (8002074 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001fdc:	6a1b      	ldr	r3, [r3, #32]
 8001fde:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fe6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fea:	d108      	bne.n	8001ffe <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d003      	beq.n	8001ffe <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8001ff6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ffa:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ffc:	e01f      	b.n	800203e <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002004:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002008:	d109      	bne.n	800201e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 800200a:	4b1a      	ldr	r3, [pc, #104]	; (8002074 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800200c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d003      	beq.n	800201e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8002016:	f649 4340 	movw	r3, #40000	; 0x9c40
 800201a:	62bb      	str	r3, [r7, #40]	; 0x28
 800201c:	e00f      	b.n	800203e <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002024:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002028:	d11a      	bne.n	8002060 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800202a:	4b12      	ldr	r3, [pc, #72]	; (8002074 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d014      	beq.n	8002060 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8002036:	f24f 4324 	movw	r3, #62500	; 0xf424
 800203a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800203c:	e010      	b.n	8002060 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800203e:	e00f      	b.n	8002060 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002040:	f7ff fe7c 	bl	8001d3c <HAL_RCC_GetPCLK2Freq>
 8002044:	4602      	mov	r2, r0
 8002046:	4b0b      	ldr	r3, [pc, #44]	; (8002074 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	0b9b      	lsrs	r3, r3, #14
 800204c:	f003 0303 	and.w	r3, r3, #3
 8002050:	3301      	adds	r3, #1
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	fbb2 f3f3 	udiv	r3, r2, r3
 8002058:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800205a:	e002      	b.n	8002062 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 800205c:	bf00      	nop
 800205e:	e000      	b.n	8002062 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8002060:	bf00      	nop
    }
  }
  return (frequency);
 8002062:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002064:	4618      	mov	r0, r3
 8002066:	3734      	adds	r7, #52	; 0x34
 8002068:	46bd      	mov	sp, r7
 800206a:	bd90      	pop	{r4, r7, pc}
 800206c:	08003598 	.word	0x08003598
 8002070:	080035a8 	.word	0x080035a8
 8002074:	40021000 	.word	0x40021000
 8002078:	007a1200 	.word	0x007a1200
 800207c:	003d0900 	.word	0x003d0900
 8002080:	aaaaaaab 	.word	0xaaaaaaab

08002084 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 800208c:	2300      	movs	r3, #0
 800208e:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d101      	bne.n	800209a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e084      	b.n	80021a4 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	7c5b      	ldrb	r3, [r3, #17]
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d105      	bne.n	80020b0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f7fe fd88 	bl	8000bc0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2202      	movs	r2, #2
 80020b4:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 faf4 	bl	80026a4 <HAL_RTC_WaitForSynchro>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d004      	beq.n	80020cc <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2204      	movs	r2, #4
 80020c6:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e06b      	b.n	80021a4 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f000 fbad 	bl	800282c <RTC_EnterInitMode>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d004      	beq.n	80020e2 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2204      	movs	r2, #4
 80020dc:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e060      	b.n	80021a4 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	685a      	ldr	r2, [r3, #4]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f022 0207 	bic.w	r2, r2, #7
 80020f0:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d005      	beq.n	8002106 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80020fa:	4b2c      	ldr	r3, [pc, #176]	; (80021ac <HAL_RTC_Init+0x128>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	4a2b      	ldr	r2, [pc, #172]	; (80021ac <HAL_RTC_Init+0x128>)
 8002100:	f023 0301 	bic.w	r3, r3, #1
 8002104:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8002106:	4b29      	ldr	r3, [pc, #164]	; (80021ac <HAL_RTC_Init+0x128>)
 8002108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800210a:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	4926      	ldr	r1, [pc, #152]	; (80021ac <HAL_RTC_Init+0x128>)
 8002114:	4313      	orrs	r3, r2
 8002116:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002120:	d003      	beq.n	800212a <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	60fb      	str	r3, [r7, #12]
 8002128:	e00e      	b.n	8002148 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800212a:	2001      	movs	r0, #1
 800212c:	f7ff feee 	bl	8001f0c <HAL_RCCEx_GetPeriphCLKFreq>
 8002130:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d104      	bne.n	8002142 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2204      	movs	r2, #4
 800213c:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e030      	b.n	80021a4 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	3b01      	subs	r3, #1
 8002146:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f023 010f 	bic.w	r1, r3, #15
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	0c1a      	lsrs	r2, r3, #16
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	430a      	orrs	r2, r1
 800215c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	0c1b      	lsrs	r3, r3, #16
 8002166:	041b      	lsls	r3, r3, #16
 8002168:	68fa      	ldr	r2, [r7, #12]
 800216a:	b291      	uxth	r1, r2
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	6812      	ldr	r2, [r2, #0]
 8002170:	430b      	orrs	r3, r1
 8002172:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f000 fb81 	bl	800287c <RTC_ExitInitMode>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d004      	beq.n	800218a <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2204      	movs	r2, #4
 8002184:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e00c      	b.n	80021a4 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2201      	movs	r2, #1
 800219a:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2201      	movs	r2, #1
 80021a0:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80021a2:	2300      	movs	r3, #0
  }
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3710      	adds	r7, #16
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	40006c00 	.word	0x40006c00

080021b0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80021b0:	b590      	push	{r4, r7, lr}
 80021b2:	b087      	sub	sp, #28
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 80021bc:	2300      	movs	r3, #0
 80021be:	617b      	str	r3, [r7, #20]
 80021c0:	2300      	movs	r3, #0
 80021c2:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d002      	beq.n	80021d0 <HAL_RTC_SetTime+0x20>
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d101      	bne.n	80021d4 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e080      	b.n	80022d6 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	7c1b      	ldrb	r3, [r3, #16]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d101      	bne.n	80021e0 <HAL_RTC_SetTime+0x30>
 80021dc:	2302      	movs	r3, #2
 80021de:	e07a      	b.n	80022d6 <HAL_RTC_SetTime+0x126>
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2201      	movs	r2, #1
 80021e4:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2202      	movs	r2, #2
 80021ea:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d113      	bne.n	800221a <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	461a      	mov	r2, r3
 80021f8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80021fc:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	785b      	ldrb	r3, [r3, #1]
 8002204:	4619      	mov	r1, r3
 8002206:	460b      	mov	r3, r1
 8002208:	011b      	lsls	r3, r3, #4
 800220a:	1a5b      	subs	r3, r3, r1
 800220c:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800220e:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8002210:	68ba      	ldr	r2, [r7, #8]
 8002212:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002214:	4413      	add	r3, r2
 8002216:	617b      	str	r3, [r7, #20]
 8002218:	e01e      	b.n	8002258 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	4618      	mov	r0, r3
 8002220:	f000 fb71 	bl	8002906 <RTC_Bcd2ToByte>
 8002224:	4603      	mov	r3, r0
 8002226:	461a      	mov	r2, r3
 8002228:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800222c:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	785b      	ldrb	r3, [r3, #1]
 8002234:	4618      	mov	r0, r3
 8002236:	f000 fb66 	bl	8002906 <RTC_Bcd2ToByte>
 800223a:	4603      	mov	r3, r0
 800223c:	461a      	mov	r2, r3
 800223e:	4613      	mov	r3, r2
 8002240:	011b      	lsls	r3, r3, #4
 8002242:	1a9b      	subs	r3, r3, r2
 8002244:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002246:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	789b      	ldrb	r3, [r3, #2]
 800224c:	4618      	mov	r0, r3
 800224e:	f000 fb5a 	bl	8002906 <RTC_Bcd2ToByte>
 8002252:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002254:	4423      	add	r3, r4
 8002256:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002258:	6979      	ldr	r1, [r7, #20]
 800225a:	68f8      	ldr	r0, [r7, #12]
 800225c:	f000 fa7f 	bl	800275e <RTC_WriteTimeCounter>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d007      	beq.n	8002276 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2204      	movs	r2, #4
 800226a:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2200      	movs	r2, #0
 8002270:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e02f      	b.n	80022d6 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	685a      	ldr	r2, [r3, #4]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f022 0205 	bic.w	r2, r2, #5
 8002284:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002286:	68f8      	ldr	r0, [r7, #12]
 8002288:	f000 fa90 	bl	80027ac <RTC_ReadAlarmCounter>
 800228c:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002294:	d018      	beq.n	80022c8 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	429a      	cmp	r2, r3
 800229c:	d214      	bcs.n	80022c8 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80022a4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80022a8:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80022aa:	6939      	ldr	r1, [r7, #16]
 80022ac:	68f8      	ldr	r0, [r7, #12]
 80022ae:	f000 fa96 	bl	80027de <RTC_WriteAlarmCounter>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d007      	beq.n	80022c8 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2204      	movs	r2, #4
 80022bc:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2200      	movs	r2, #0
 80022c2:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e006      	b.n	80022d6 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2201      	movs	r2, #1
 80022cc:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2200      	movs	r2, #0
 80022d2:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80022d4:	2300      	movs	r3, #0
  }
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	371c      	adds	r7, #28
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd90      	pop	{r4, r7, pc}
	...

080022e0 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b088      	sub	sp, #32
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	60b9      	str	r1, [r7, #8]
 80022ea:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 80022ec:	2300      	movs	r3, #0
 80022ee:	61bb      	str	r3, [r7, #24]
 80022f0:	2300      	movs	r3, #0
 80022f2:	61fb      	str	r3, [r7, #28]
 80022f4:	2300      	movs	r3, #0
 80022f6:	617b      	str	r3, [r7, #20]
 80022f8:	2300      	movs	r3, #0
 80022fa:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d002      	beq.n	8002308 <HAL_RTC_GetTime+0x28>
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d101      	bne.n	800230c <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e0b5      	b.n	8002478 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f003 0304 	and.w	r3, r3, #4
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e0ac      	b.n	8002478 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800231e:	68f8      	ldr	r0, [r7, #12]
 8002320:	f000 f9ed 	bl	80026fe <RTC_ReadTimeCounter>
 8002324:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	4a55      	ldr	r2, [pc, #340]	; (8002480 <HAL_RTC_GetTime+0x1a0>)
 800232a:	fba2 2303 	umull	r2, r3, r2, r3
 800232e:	0adb      	lsrs	r3, r3, #11
 8002330:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	4b52      	ldr	r3, [pc, #328]	; (8002480 <HAL_RTC_GetTime+0x1a0>)
 8002336:	fba3 1302 	umull	r1, r3, r3, r2
 800233a:	0adb      	lsrs	r3, r3, #11
 800233c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002340:	fb01 f303 	mul.w	r3, r1, r3
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	4a4f      	ldr	r2, [pc, #316]	; (8002484 <HAL_RTC_GetTime+0x1a4>)
 8002348:	fba2 2303 	umull	r2, r3, r2, r3
 800234c:	095b      	lsrs	r3, r3, #5
 800234e:	b2da      	uxtb	r2, r3
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	4a4a      	ldr	r2, [pc, #296]	; (8002480 <HAL_RTC_GetTime+0x1a0>)
 8002358:	fba2 1203 	umull	r1, r2, r2, r3
 800235c:	0ad2      	lsrs	r2, r2, #11
 800235e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002362:	fb01 f202 	mul.w	r2, r1, r2
 8002366:	1a9a      	subs	r2, r3, r2
 8002368:	4b46      	ldr	r3, [pc, #280]	; (8002484 <HAL_RTC_GetTime+0x1a4>)
 800236a:	fba3 1302 	umull	r1, r3, r3, r2
 800236e:	0959      	lsrs	r1, r3, #5
 8002370:	460b      	mov	r3, r1
 8002372:	011b      	lsls	r3, r3, #4
 8002374:	1a5b      	subs	r3, r3, r1
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	1ad1      	subs	r1, r2, r3
 800237a:	b2ca      	uxtb	r2, r1
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	2b17      	cmp	r3, #23
 8002384:	d955      	bls.n	8002432 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	4a3f      	ldr	r2, [pc, #252]	; (8002488 <HAL_RTC_GetTime+0x1a8>)
 800238a:	fba2 2303 	umull	r2, r3, r2, r3
 800238e:	091b      	lsrs	r3, r3, #4
 8002390:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8002392:	6939      	ldr	r1, [r7, #16]
 8002394:	4b3c      	ldr	r3, [pc, #240]	; (8002488 <HAL_RTC_GetTime+0x1a8>)
 8002396:	fba3 2301 	umull	r2, r3, r3, r1
 800239a:	091a      	lsrs	r2, r3, #4
 800239c:	4613      	mov	r3, r2
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	4413      	add	r3, r2
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	1aca      	subs	r2, r1, r3
 80023a6:	b2d2      	uxtb	r2, r2
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80023ac:	68f8      	ldr	r0, [r7, #12]
 80023ae:	f000 f9fd 	bl	80027ac <RTC_ReadAlarmCounter>
 80023b2:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ba:	d008      	beq.n	80023ce <HAL_RTC_GetTime+0xee>
 80023bc:	69fa      	ldr	r2, [r7, #28]
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d904      	bls.n	80023ce <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 80023c4:	69fa      	ldr	r2, [r7, #28]
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	61fb      	str	r3, [r7, #28]
 80023cc:	e002      	b.n	80023d4 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 80023ce:	f04f 33ff 	mov.w	r3, #4294967295
 80023d2:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	4a2d      	ldr	r2, [pc, #180]	; (800248c <HAL_RTC_GetTime+0x1ac>)
 80023d8:	fb02 f303 	mul.w	r3, r2, r3
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80023e2:	69b9      	ldr	r1, [r7, #24]
 80023e4:	68f8      	ldr	r0, [r7, #12]
 80023e6:	f000 f9ba 	bl	800275e <RTC_WriteTimeCounter>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e041      	b.n	8002478 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023fa:	d00c      	beq.n	8002416 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 80023fc:	69fa      	ldr	r2, [r7, #28]
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	4413      	add	r3, r2
 8002402:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002404:	69f9      	ldr	r1, [r7, #28]
 8002406:	68f8      	ldr	r0, [r7, #12]
 8002408:	f000 f9e9 	bl	80027de <RTC_WriteAlarmCounter>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d00a      	beq.n	8002428 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e030      	b.n	8002478 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002416:	69f9      	ldr	r1, [r7, #28]
 8002418:	68f8      	ldr	r0, [r7, #12]
 800241a:	f000 f9e0 	bl	80027de <RTC_WriteAlarmCounter>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e027      	b.n	8002478 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8002428:	6979      	ldr	r1, [r7, #20]
 800242a:	68f8      	ldr	r0, [r7, #12]
 800242c:	f000 fa88 	bl	8002940 <RTC_DateUpdate>
 8002430:	e003      	b.n	800243a <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	b2da      	uxtb	r2, r3
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d01a      	beq.n	8002476 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	4618      	mov	r0, r3
 8002446:	f000 fa41 	bl	80028cc <RTC_ByteToBcd2>
 800244a:	4603      	mov	r3, r0
 800244c:	461a      	mov	r2, r3
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	785b      	ldrb	r3, [r3, #1]
 8002456:	4618      	mov	r0, r3
 8002458:	f000 fa38 	bl	80028cc <RTC_ByteToBcd2>
 800245c:	4603      	mov	r3, r0
 800245e:	461a      	mov	r2, r3
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	789b      	ldrb	r3, [r3, #2]
 8002468:	4618      	mov	r0, r3
 800246a:	f000 fa2f 	bl	80028cc <RTC_ByteToBcd2>
 800246e:	4603      	mov	r3, r0
 8002470:	461a      	mov	r2, r3
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002476:	2300      	movs	r3, #0
}
 8002478:	4618      	mov	r0, r3
 800247a:	3720      	adds	r7, #32
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	91a2b3c5 	.word	0x91a2b3c5
 8002484:	88888889 	.word	0x88888889
 8002488:	aaaaaaab 	.word	0xaaaaaaab
 800248c:	00015180 	.word	0x00015180

08002490 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b088      	sub	sp, #32
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 800249c:	2300      	movs	r3, #0
 800249e:	61fb      	str	r3, [r7, #28]
 80024a0:	2300      	movs	r3, #0
 80024a2:	61bb      	str	r3, [r7, #24]
 80024a4:	2300      	movs	r3, #0
 80024a6:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d002      	beq.n	80024b4 <HAL_RTC_SetDate+0x24>
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d101      	bne.n	80024b8 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e097      	b.n	80025e8 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	7c1b      	ldrb	r3, [r3, #16]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d101      	bne.n	80024c4 <HAL_RTC_SetDate+0x34>
 80024c0:	2302      	movs	r3, #2
 80024c2:	e091      	b.n	80025e8 <HAL_RTC_SetDate+0x158>
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2201      	movs	r2, #1
 80024c8:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2202      	movs	r2, #2
 80024ce:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d10c      	bne.n	80024f0 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	78da      	ldrb	r2, [r3, #3]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	785a      	ldrb	r2, [r3, #1]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	789a      	ldrb	r2, [r3, #2]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	739a      	strb	r2, [r3, #14]
 80024ee:	e01a      	b.n	8002526 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	78db      	ldrb	r3, [r3, #3]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f000 fa06 	bl	8002906 <RTC_Bcd2ToByte>
 80024fa:	4603      	mov	r3, r0
 80024fc:	461a      	mov	r2, r3
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	785b      	ldrb	r3, [r3, #1]
 8002506:	4618      	mov	r0, r3
 8002508:	f000 f9fd 	bl	8002906 <RTC_Bcd2ToByte>
 800250c:	4603      	mov	r3, r0
 800250e:	461a      	mov	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	789b      	ldrb	r3, [r3, #2]
 8002518:	4618      	mov	r0, r3
 800251a:	f000 f9f4 	bl	8002906 <RTC_Bcd2ToByte>
 800251e:	4603      	mov	r3, r0
 8002520:	461a      	mov	r2, r3
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	7bdb      	ldrb	r3, [r3, #15]
 800252a:	4618      	mov	r0, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	7b59      	ldrb	r1, [r3, #13]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	7b9b      	ldrb	r3, [r3, #14]
 8002534:	461a      	mov	r2, r3
 8002536:	f000 fadf 	bl	8002af8 <RTC_WeekDayNum>
 800253a:	4603      	mov	r3, r0
 800253c:	461a      	mov	r2, r3
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	7b1a      	ldrb	r2, [r3, #12]
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800254a:	68f8      	ldr	r0, [r7, #12]
 800254c:	f000 f8d7 	bl	80026fe <RTC_ReadTimeCounter>
 8002550:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	4a26      	ldr	r2, [pc, #152]	; (80025f0 <HAL_RTC_SetDate+0x160>)
 8002556:	fba2 2303 	umull	r2, r3, r2, r3
 800255a:	0adb      	lsrs	r3, r3, #11
 800255c:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	2b18      	cmp	r3, #24
 8002562:	d93a      	bls.n	80025da <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	4a23      	ldr	r2, [pc, #140]	; (80025f4 <HAL_RTC_SetDate+0x164>)
 8002568:	fba2 2303 	umull	r2, r3, r2, r3
 800256c:	091b      	lsrs	r3, r3, #4
 800256e:	4a22      	ldr	r2, [pc, #136]	; (80025f8 <HAL_RTC_SetDate+0x168>)
 8002570:	fb02 f303 	mul.w	r3, r2, r3
 8002574:	69fa      	ldr	r2, [r7, #28]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800257a:	69f9      	ldr	r1, [r7, #28]
 800257c:	68f8      	ldr	r0, [r7, #12]
 800257e:	f000 f8ee 	bl	800275e <RTC_WriteTimeCounter>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d007      	beq.n	8002598 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2204      	movs	r2, #4
 800258c:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2200      	movs	r2, #0
 8002592:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e027      	b.n	80025e8 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002598:	68f8      	ldr	r0, [r7, #12]
 800259a:	f000 f907 	bl	80027ac <RTC_ReadAlarmCounter>
 800259e:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025a6:	d018      	beq.n	80025da <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d214      	bcs.n	80025da <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80025b6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80025ba:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80025bc:	69b9      	ldr	r1, [r7, #24]
 80025be:	68f8      	ldr	r0, [r7, #12]
 80025c0:	f000 f90d 	bl	80027de <RTC_WriteAlarmCounter>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d007      	beq.n	80025da <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2204      	movs	r2, #4
 80025ce:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2200      	movs	r2, #0
 80025d4:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e006      	b.n	80025e8 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2201      	movs	r2, #1
 80025de:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2200      	movs	r2, #0
 80025e4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80025e6:	2300      	movs	r3, #0
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3720      	adds	r7, #32
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	91a2b3c5 	.word	0x91a2b3c5
 80025f4:	aaaaaaab 	.word	0xaaaaaaab
 80025f8:	00015180 	.word	0x00015180

080025fc <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b086      	sub	sp, #24
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8002608:	f107 0314 	add.w	r3, r7, #20
 800260c:	2100      	movs	r1, #0
 800260e:	460a      	mov	r2, r1
 8002610:	801a      	strh	r2, [r3, #0]
 8002612:	460a      	mov	r2, r1
 8002614:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d002      	beq.n	8002622 <HAL_RTC_GetDate+0x26>
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d101      	bne.n	8002626 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e03a      	b.n	800269c <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8002626:	f107 0314 	add.w	r3, r7, #20
 800262a:	2200      	movs	r2, #0
 800262c:	4619      	mov	r1, r3
 800262e:	68f8      	ldr	r0, [r7, #12]
 8002630:	f7ff fe56 	bl	80022e0 <HAL_RTC_GetTime>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e02e      	b.n	800269c <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	7b1a      	ldrb	r2, [r3, #12]
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	7bda      	ldrb	r2, [r3, #15]
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	7b5a      	ldrb	r2, [r3, #13]
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	7b9a      	ldrb	r2, [r3, #14]
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d01a      	beq.n	800269a <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	78db      	ldrb	r3, [r3, #3]
 8002668:	4618      	mov	r0, r3
 800266a:	f000 f92f 	bl	80028cc <RTC_ByteToBcd2>
 800266e:	4603      	mov	r3, r0
 8002670:	461a      	mov	r2, r3
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	785b      	ldrb	r3, [r3, #1]
 800267a:	4618      	mov	r0, r3
 800267c:	f000 f926 	bl	80028cc <RTC_ByteToBcd2>
 8002680:	4603      	mov	r3, r0
 8002682:	461a      	mov	r2, r3
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	789b      	ldrb	r3, [r3, #2]
 800268c:	4618      	mov	r0, r3
 800268e:	f000 f91d 	bl	80028cc <RTC_ByteToBcd2>
 8002692:	4603      	mov	r3, r0
 8002694:	461a      	mov	r2, r3
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800269a:	2300      	movs	r3, #0
}
 800269c:	4618      	mov	r0, r3
 800269e:	3718      	adds	r7, #24
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026ac:	2300      	movs	r3, #0
 80026ae:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d101      	bne.n	80026ba <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e01d      	b.n	80026f6 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	685a      	ldr	r2, [r3, #4]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f022 0208 	bic.w	r2, r2, #8
 80026c8:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80026ca:	f7fe fb77 	bl	8000dbc <HAL_GetTick>
 80026ce:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80026d0:	e009      	b.n	80026e6 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80026d2:	f7fe fb73 	bl	8000dbc <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026e0:	d901      	bls.n	80026e6 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e007      	b.n	80026f6 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f003 0308 	and.w	r3, r3, #8
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d0ee      	beq.n	80026d2 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80026fe:	b480      	push	{r7}
 8002700:	b087      	sub	sp, #28
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8002706:	2300      	movs	r3, #0
 8002708:	827b      	strh	r3, [r7, #18]
 800270a:	2300      	movs	r3, #0
 800270c:	823b      	strh	r3, [r7, #16]
 800270e:	2300      	movs	r3, #0
 8002710:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8002712:	2300      	movs	r3, #0
 8002714:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	69db      	ldr	r3, [r3, #28]
 8002724:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 800272e:	8a7a      	ldrh	r2, [r7, #18]
 8002730:	8a3b      	ldrh	r3, [r7, #16]
 8002732:	429a      	cmp	r2, r3
 8002734:	d008      	beq.n	8002748 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8002736:	8a3b      	ldrh	r3, [r7, #16]
 8002738:	041a      	lsls	r2, r3, #16
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	69db      	ldr	r3, [r3, #28]
 8002740:	b29b      	uxth	r3, r3
 8002742:	4313      	orrs	r3, r2
 8002744:	617b      	str	r3, [r7, #20]
 8002746:	e004      	b.n	8002752 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8002748:	8a7b      	ldrh	r3, [r7, #18]
 800274a:	041a      	lsls	r2, r3, #16
 800274c:	89fb      	ldrh	r3, [r7, #14]
 800274e:	4313      	orrs	r3, r2
 8002750:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8002752:	697b      	ldr	r3, [r7, #20]
}
 8002754:	4618      	mov	r0, r3
 8002756:	371c      	adds	r7, #28
 8002758:	46bd      	mov	sp, r7
 800275a:	bc80      	pop	{r7}
 800275c:	4770      	bx	lr

0800275e <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 800275e:	b580      	push	{r7, lr}
 8002760:	b084      	sub	sp, #16
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
 8002766:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002768:	2300      	movs	r3, #0
 800276a:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f000 f85d 	bl	800282c <RTC_EnterInitMode>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d002      	beq.n	800277e <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	73fb      	strb	r3, [r7, #15]
 800277c:	e011      	b.n	80027a2 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	683a      	ldr	r2, [r7, #0]
 8002784:	0c12      	lsrs	r2, r2, #16
 8002786:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	683a      	ldr	r2, [r7, #0]
 800278e:	b292      	uxth	r2, r2
 8002790:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f000 f872 	bl	800287c <RTC_ExitInitMode>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80027a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3710      	adds	r7, #16
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 80027b4:	2300      	movs	r3, #0
 80027b6:	81fb      	strh	r3, [r7, #14]
 80027b8:	2300      	movs	r3, #0
 80027ba:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	6a1b      	ldr	r3, [r3, #32]
 80027c2:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ca:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 80027cc:	89fb      	ldrh	r3, [r7, #14]
 80027ce:	041a      	lsls	r2, r3, #16
 80027d0:	89bb      	ldrh	r3, [r7, #12]
 80027d2:	4313      	orrs	r3, r2
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3714      	adds	r7, #20
 80027d8:	46bd      	mov	sp, r7
 80027da:	bc80      	pop	{r7}
 80027dc:	4770      	bx	lr

080027de <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 80027de:	b580      	push	{r7, lr}
 80027e0:	b084      	sub	sp, #16
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
 80027e6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027e8:	2300      	movs	r3, #0
 80027ea:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f000 f81d 	bl	800282c <RTC_EnterInitMode>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d002      	beq.n	80027fe <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	73fb      	strb	r3, [r7, #15]
 80027fc:	e011      	b.n	8002822 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	683a      	ldr	r2, [r7, #0]
 8002804:	0c12      	lsrs	r2, r2, #16
 8002806:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	683a      	ldr	r2, [r7, #0]
 800280e:	b292      	uxth	r2, r2
 8002810:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 f832 	bl	800287c <RTC_ExitInitMode>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002822:	7bfb      	ldrb	r3, [r7, #15]
}
 8002824:	4618      	mov	r0, r3
 8002826:	3710      	adds	r7, #16
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002834:	2300      	movs	r3, #0
 8002836:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8002838:	f7fe fac0 	bl	8000dbc <HAL_GetTick>
 800283c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800283e:	e009      	b.n	8002854 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002840:	f7fe fabc 	bl	8000dbc <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800284e:	d901      	bls.n	8002854 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e00f      	b.n	8002874 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f003 0320 	and.w	r3, r3, #32
 800285e:	2b00      	cmp	r3, #0
 8002860:	d0ee      	beq.n	8002840 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	685a      	ldr	r2, [r3, #4]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f042 0210 	orr.w	r2, r2, #16
 8002870:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8002872:	2300      	movs	r3, #0
}
 8002874:	4618      	mov	r0, r3
 8002876:	3710      	adds	r7, #16
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002884:	2300      	movs	r3, #0
 8002886:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	685a      	ldr	r2, [r3, #4]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f022 0210 	bic.w	r2, r2, #16
 8002896:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002898:	f7fe fa90 	bl	8000dbc <HAL_GetTick>
 800289c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800289e:	e009      	b.n	80028b4 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80028a0:	f7fe fa8c 	bl	8000dbc <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028ae:	d901      	bls.n	80028b4 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e007      	b.n	80028c4 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f003 0320 	and.w	r3, r3, #32
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d0ee      	beq.n	80028a0 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80028c2:	2300      	movs	r3, #0
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3710      	adds	r7, #16
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	4603      	mov	r3, r0
 80028d4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80028d6:	2300      	movs	r3, #0
 80028d8:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 80028da:	e005      	b.n	80028e8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	3301      	adds	r3, #1
 80028e0:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80028e2:	79fb      	ldrb	r3, [r7, #7]
 80028e4:	3b0a      	subs	r3, #10
 80028e6:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 80028e8:	79fb      	ldrb	r3, [r7, #7]
 80028ea:	2b09      	cmp	r3, #9
 80028ec:	d8f6      	bhi.n	80028dc <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	011b      	lsls	r3, r3, #4
 80028f4:	b2da      	uxtb	r2, r3
 80028f6:	79fb      	ldrb	r3, [r7, #7]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	b2db      	uxtb	r3, r3
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3714      	adds	r7, #20
 8002900:	46bd      	mov	sp, r7
 8002902:	bc80      	pop	{r7}
 8002904:	4770      	bx	lr

08002906 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002906:	b480      	push	{r7}
 8002908:	b085      	sub	sp, #20
 800290a:	af00      	add	r7, sp, #0
 800290c:	4603      	mov	r3, r0
 800290e:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8002910:	2300      	movs	r3, #0
 8002912:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8002914:	79fb      	ldrb	r3, [r7, #7]
 8002916:	091b      	lsrs	r3, r3, #4
 8002918:	b2db      	uxtb	r3, r3
 800291a:	461a      	mov	r2, r3
 800291c:	4613      	mov	r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	4413      	add	r3, r2
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8002926:	79fb      	ldrb	r3, [r7, #7]
 8002928:	f003 030f 	and.w	r3, r3, #15
 800292c:	b2da      	uxtb	r2, r3
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	b2db      	uxtb	r3, r3
 8002932:	4413      	add	r3, r2
 8002934:	b2db      	uxtb	r3, r3
}
 8002936:	4618      	mov	r0, r3
 8002938:	3714      	adds	r7, #20
 800293a:	46bd      	mov	sp, r7
 800293c:	bc80      	pop	{r7}
 800293e:	4770      	bx	lr

08002940 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b086      	sub	sp, #24
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 800294a:	2300      	movs	r3, #0
 800294c:	617b      	str	r3, [r7, #20]
 800294e:	2300      	movs	r3, #0
 8002950:	613b      	str	r3, [r7, #16]
 8002952:	2300      	movs	r3, #0
 8002954:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8002956:	2300      	movs	r3, #0
 8002958:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	7bdb      	ldrb	r3, [r3, #15]
 800295e:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	7b5b      	ldrb	r3, [r3, #13]
 8002964:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	7b9b      	ldrb	r3, [r3, #14]
 800296a:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 800296c:	2300      	movs	r3, #0
 800296e:	60bb      	str	r3, [r7, #8]
 8002970:	e06f      	b.n	8002a52 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	2b01      	cmp	r3, #1
 8002976:	d011      	beq.n	800299c <RTC_DateUpdate+0x5c>
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	2b03      	cmp	r3, #3
 800297c:	d00e      	beq.n	800299c <RTC_DateUpdate+0x5c>
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	2b05      	cmp	r3, #5
 8002982:	d00b      	beq.n	800299c <RTC_DateUpdate+0x5c>
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	2b07      	cmp	r3, #7
 8002988:	d008      	beq.n	800299c <RTC_DateUpdate+0x5c>
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	2b08      	cmp	r3, #8
 800298e:	d005      	beq.n	800299c <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	2b0a      	cmp	r3, #10
 8002994:	d002      	beq.n	800299c <RTC_DateUpdate+0x5c>
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	2b0c      	cmp	r3, #12
 800299a:	d117      	bne.n	80029cc <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2b1e      	cmp	r3, #30
 80029a0:	d803      	bhi.n	80029aa <RTC_DateUpdate+0x6a>
      {
        day++;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	3301      	adds	r3, #1
 80029a6:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80029a8:	e050      	b.n	8002a4c <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	2b0c      	cmp	r3, #12
 80029ae:	d005      	beq.n	80029bc <RTC_DateUpdate+0x7c>
        {
          month++;
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	3301      	adds	r3, #1
 80029b4:	613b      	str	r3, [r7, #16]
          day = 1U;
 80029b6:	2301      	movs	r3, #1
 80029b8:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80029ba:	e047      	b.n	8002a4c <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 80029bc:	2301      	movs	r3, #1
 80029be:	613b      	str	r3, [r7, #16]
          day = 1U;
 80029c0:	2301      	movs	r3, #1
 80029c2:	60fb      	str	r3, [r7, #12]
          year++;
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	3301      	adds	r3, #1
 80029c8:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 80029ca:	e03f      	b.n	8002a4c <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	2b04      	cmp	r3, #4
 80029d0:	d008      	beq.n	80029e4 <RTC_DateUpdate+0xa4>
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	2b06      	cmp	r3, #6
 80029d6:	d005      	beq.n	80029e4 <RTC_DateUpdate+0xa4>
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	2b09      	cmp	r3, #9
 80029dc:	d002      	beq.n	80029e4 <RTC_DateUpdate+0xa4>
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	2b0b      	cmp	r3, #11
 80029e2:	d10c      	bne.n	80029fe <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2b1d      	cmp	r3, #29
 80029e8:	d803      	bhi.n	80029f2 <RTC_DateUpdate+0xb2>
      {
        day++;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	3301      	adds	r3, #1
 80029ee:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80029f0:	e02c      	b.n	8002a4c <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	3301      	adds	r3, #1
 80029f6:	613b      	str	r3, [r7, #16]
        day = 1U;
 80029f8:	2301      	movs	r3, #1
 80029fa:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80029fc:	e026      	b.n	8002a4c <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d123      	bne.n	8002a4c <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2b1b      	cmp	r3, #27
 8002a08:	d803      	bhi.n	8002a12 <RTC_DateUpdate+0xd2>
      {
        day++;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	60fb      	str	r3, [r7, #12]
 8002a10:	e01c      	b.n	8002a4c <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2b1c      	cmp	r3, #28
 8002a16:	d111      	bne.n	8002a3c <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f000 f839 	bl	8002a94 <RTC_IsLeapYear>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d003      	beq.n	8002a30 <RTC_DateUpdate+0xf0>
        {
          day++;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	60fb      	str	r3, [r7, #12]
 8002a2e:	e00d      	b.n	8002a4c <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	3301      	adds	r3, #1
 8002a34:	613b      	str	r3, [r7, #16]
          day = 1U;
 8002a36:	2301      	movs	r3, #1
 8002a38:	60fb      	str	r3, [r7, #12]
 8002a3a:	e007      	b.n	8002a4c <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2b1d      	cmp	r3, #29
 8002a40:	d104      	bne.n	8002a4c <RTC_DateUpdate+0x10c>
      {
        month++;
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	3301      	adds	r3, #1
 8002a46:	613b      	str	r3, [r7, #16]
        day = 1U;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	3301      	adds	r3, #1
 8002a50:	60bb      	str	r3, [r7, #8]
 8002a52:	68ba      	ldr	r2, [r7, #8]
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d38b      	bcc.n	8002972 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	b2da      	uxtb	r2, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	b2da      	uxtb	r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	b2da      	uxtb	r2, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	68fa      	ldr	r2, [r7, #12]
 8002a78:	b2d2      	uxtb	r2, r2
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	6978      	ldr	r0, [r7, #20]
 8002a7e:	f000 f83b 	bl	8002af8 <RTC_WeekDayNum>
 8002a82:	4603      	mov	r3, r0
 8002a84:	461a      	mov	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	731a      	strb	r2, [r3, #12]
}
 8002a8a:	bf00      	nop
 8002a8c:	3718      	adds	r7, #24
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
	...

08002a94 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8002a9e:	88fb      	ldrh	r3, [r7, #6]
 8002aa0:	f003 0303 	and.w	r3, r3, #3
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	e01d      	b.n	8002aea <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8002aae:	88fb      	ldrh	r3, [r7, #6]
 8002ab0:	4a10      	ldr	r2, [pc, #64]	; (8002af4 <RTC_IsLeapYear+0x60>)
 8002ab2:	fba2 1203 	umull	r1, r2, r2, r3
 8002ab6:	0952      	lsrs	r2, r2, #5
 8002ab8:	2164      	movs	r1, #100	; 0x64
 8002aba:	fb01 f202 	mul.w	r2, r1, r2
 8002abe:	1a9b      	subs	r3, r3, r2
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e00f      	b.n	8002aea <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8002aca:	88fb      	ldrh	r3, [r7, #6]
 8002acc:	4a09      	ldr	r2, [pc, #36]	; (8002af4 <RTC_IsLeapYear+0x60>)
 8002ace:	fba2 1203 	umull	r1, r2, r2, r3
 8002ad2:	09d2      	lsrs	r2, r2, #7
 8002ad4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002ad8:	fb01 f202 	mul.w	r2, r1, r2
 8002adc:	1a9b      	subs	r3, r3, r2
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d101      	bne.n	8002ae8 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e000      	b.n	8002aea <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8002ae8:	2300      	movs	r3, #0
  }
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	370c      	adds	r7, #12
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bc80      	pop	{r7}
 8002af2:	4770      	bx	lr
 8002af4:	51eb851f 	.word	0x51eb851f

08002af8 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b085      	sub	sp, #20
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	460b      	mov	r3, r1
 8002b02:	70fb      	strb	r3, [r7, #3]
 8002b04:	4613      	mov	r3, r2
 8002b06:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	60bb      	str	r3, [r7, #8]
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8002b16:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8002b18:	78fb      	ldrb	r3, [r7, #3]
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d82d      	bhi.n	8002b7a <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8002b1e:	78fa      	ldrb	r2, [r7, #3]
 8002b20:	4613      	mov	r3, r2
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	4413      	add	r3, r2
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	1a9b      	subs	r3, r3, r2
 8002b2a:	4a2c      	ldr	r2, [pc, #176]	; (8002bdc <RTC_WeekDayNum+0xe4>)
 8002b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b30:	085a      	lsrs	r2, r3, #1
 8002b32:	78bb      	ldrb	r3, [r7, #2]
 8002b34:	441a      	add	r2, r3
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	441a      	add	r2, r3
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	089b      	lsrs	r3, r3, #2
 8002b40:	441a      	add	r2, r3
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	3b01      	subs	r3, #1
 8002b46:	4926      	ldr	r1, [pc, #152]	; (8002be0 <RTC_WeekDayNum+0xe8>)
 8002b48:	fba1 1303 	umull	r1, r3, r1, r3
 8002b4c:	095b      	lsrs	r3, r3, #5
 8002b4e:	1ad2      	subs	r2, r2, r3
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	3b01      	subs	r3, #1
 8002b54:	4922      	ldr	r1, [pc, #136]	; (8002be0 <RTC_WeekDayNum+0xe8>)
 8002b56:	fba1 1303 	umull	r1, r3, r1, r3
 8002b5a:	09db      	lsrs	r3, r3, #7
 8002b5c:	4413      	add	r3, r2
 8002b5e:	1d1a      	adds	r2, r3, #4
 8002b60:	4b20      	ldr	r3, [pc, #128]	; (8002be4 <RTC_WeekDayNum+0xec>)
 8002b62:	fba3 1302 	umull	r1, r3, r3, r2
 8002b66:	1ad1      	subs	r1, r2, r3
 8002b68:	0849      	lsrs	r1, r1, #1
 8002b6a:	440b      	add	r3, r1
 8002b6c:	0899      	lsrs	r1, r3, #2
 8002b6e:	460b      	mov	r3, r1
 8002b70:	00db      	lsls	r3, r3, #3
 8002b72:	1a5b      	subs	r3, r3, r1
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	60fb      	str	r3, [r7, #12]
 8002b78:	e029      	b.n	8002bce <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8002b7a:	78fa      	ldrb	r2, [r7, #3]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	4413      	add	r3, r2
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	1a9b      	subs	r3, r3, r2
 8002b86:	4a15      	ldr	r2, [pc, #84]	; (8002bdc <RTC_WeekDayNum+0xe4>)
 8002b88:	fba2 2303 	umull	r2, r3, r2, r3
 8002b8c:	085a      	lsrs	r2, r3, #1
 8002b8e:	78bb      	ldrb	r3, [r7, #2]
 8002b90:	441a      	add	r2, r3
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	441a      	add	r2, r3
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	089b      	lsrs	r3, r3, #2
 8002b9a:	441a      	add	r2, r3
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	4910      	ldr	r1, [pc, #64]	; (8002be0 <RTC_WeekDayNum+0xe8>)
 8002ba0:	fba1 1303 	umull	r1, r3, r1, r3
 8002ba4:	095b      	lsrs	r3, r3, #5
 8002ba6:	1ad2      	subs	r2, r2, r3
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	490d      	ldr	r1, [pc, #52]	; (8002be0 <RTC_WeekDayNum+0xe8>)
 8002bac:	fba1 1303 	umull	r1, r3, r1, r3
 8002bb0:	09db      	lsrs	r3, r3, #7
 8002bb2:	4413      	add	r3, r2
 8002bb4:	1c9a      	adds	r2, r3, #2
 8002bb6:	4b0b      	ldr	r3, [pc, #44]	; (8002be4 <RTC_WeekDayNum+0xec>)
 8002bb8:	fba3 1302 	umull	r1, r3, r3, r2
 8002bbc:	1ad1      	subs	r1, r2, r3
 8002bbe:	0849      	lsrs	r1, r1, #1
 8002bc0:	440b      	add	r3, r1
 8002bc2:	0899      	lsrs	r1, r3, #2
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	00db      	lsls	r3, r3, #3
 8002bc8:	1a5b      	subs	r3, r3, r1
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	b2db      	uxtb	r3, r3
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3714      	adds	r7, #20
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bc80      	pop	{r7}
 8002bda:	4770      	bx	lr
 8002bdc:	38e38e39 	.word	0x38e38e39
 8002be0:	51eb851f 	.word	0x51eb851f
 8002be4:	24924925 	.word	0x24924925

08002be8 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register (depending devices).
  * @param  Data: Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b087      	sub	sp, #28
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	617b      	str	r3, [r7, #20]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)BKP_BASE;
 8002bf8:	4b07      	ldr	r3, [pc, #28]	; (8002c18 <HAL_RTCEx_BKUPWrite+0x30>)
 8002bfa:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	697a      	ldr	r2, [r7, #20]
 8002c02:	4413      	add	r3, r2
 8002c04:	617b      	str	r3, [r7, #20]

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	b292      	uxth	r2, r2
 8002c0c:	601a      	str	r2, [r3, #0]
}
 8002c0e:	bf00      	nop
 8002c10:	371c      	adds	r7, #28
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bc80      	pop	{r7}
 8002c16:	4770      	bx	lr
 8002c18:	40006c00 	.word	0x40006c00

08002c1c <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 1 to 10 (or 42) to
  *                                 specify the register (depending devices).
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b085      	sub	sp, #20
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
  uint32_t backupregister = 0U;
 8002c26:	2300      	movs	r3, #0
 8002c28:	60fb      	str	r3, [r7, #12]
  uint32_t pvalue = 0U;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	60bb      	str	r3, [r7, #8]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE;
 8002c2e:	4b08      	ldr	r3, [pc, #32]	; (8002c50 <HAL_RTCEx_BKUPRead+0x34>)
 8002c30:	60fb      	str	r3, [r7, #12]
  backupregister += (BackupRegister * 4U);
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	68fa      	ldr	r2, [r7, #12]
 8002c38:	4413      	add	r3, r2
 8002c3a:	60fb      	str	r3, [r7, #12]

  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return pvalue;
 8002c44:	68bb      	ldr	r3, [r7, #8]
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3714      	adds	r7, #20
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bc80      	pop	{r7}
 8002c4e:	4770      	bx	lr
 8002c50:	40006c00 	.word	0x40006c00

08002c54 <__errno>:
 8002c54:	4b01      	ldr	r3, [pc, #4]	; (8002c5c <__errno+0x8>)
 8002c56:	6818      	ldr	r0, [r3, #0]
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	2000000c 	.word	0x2000000c

08002c60 <__libc_init_array>:
 8002c60:	b570      	push	{r4, r5, r6, lr}
 8002c62:	2500      	movs	r5, #0
 8002c64:	4e0c      	ldr	r6, [pc, #48]	; (8002c98 <__libc_init_array+0x38>)
 8002c66:	4c0d      	ldr	r4, [pc, #52]	; (8002c9c <__libc_init_array+0x3c>)
 8002c68:	1ba4      	subs	r4, r4, r6
 8002c6a:	10a4      	asrs	r4, r4, #2
 8002c6c:	42a5      	cmp	r5, r4
 8002c6e:	d109      	bne.n	8002c84 <__libc_init_array+0x24>
 8002c70:	f000 fc34 	bl	80034dc <_init>
 8002c74:	2500      	movs	r5, #0
 8002c76:	4e0a      	ldr	r6, [pc, #40]	; (8002ca0 <__libc_init_array+0x40>)
 8002c78:	4c0a      	ldr	r4, [pc, #40]	; (8002ca4 <__libc_init_array+0x44>)
 8002c7a:	1ba4      	subs	r4, r4, r6
 8002c7c:	10a4      	asrs	r4, r4, #2
 8002c7e:	42a5      	cmp	r5, r4
 8002c80:	d105      	bne.n	8002c8e <__libc_init_array+0x2e>
 8002c82:	bd70      	pop	{r4, r5, r6, pc}
 8002c84:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c88:	4798      	blx	r3
 8002c8a:	3501      	adds	r5, #1
 8002c8c:	e7ee      	b.n	8002c6c <__libc_init_array+0xc>
 8002c8e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c92:	4798      	blx	r3
 8002c94:	3501      	adds	r5, #1
 8002c96:	e7f2      	b.n	8002c7e <__libc_init_array+0x1e>
 8002c98:	080035f8 	.word	0x080035f8
 8002c9c:	080035f8 	.word	0x080035f8
 8002ca0:	080035f8 	.word	0x080035f8
 8002ca4:	080035fc 	.word	0x080035fc

08002ca8 <memset>:
 8002ca8:	4603      	mov	r3, r0
 8002caa:	4402      	add	r2, r0
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d100      	bne.n	8002cb2 <memset+0xa>
 8002cb0:	4770      	bx	lr
 8002cb2:	f803 1b01 	strb.w	r1, [r3], #1
 8002cb6:	e7f9      	b.n	8002cac <memset+0x4>

08002cb8 <siprintf>:
 8002cb8:	b40e      	push	{r1, r2, r3}
 8002cba:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002cbe:	b500      	push	{lr}
 8002cc0:	b09c      	sub	sp, #112	; 0x70
 8002cc2:	ab1d      	add	r3, sp, #116	; 0x74
 8002cc4:	9002      	str	r0, [sp, #8]
 8002cc6:	9006      	str	r0, [sp, #24]
 8002cc8:	9107      	str	r1, [sp, #28]
 8002cca:	9104      	str	r1, [sp, #16]
 8002ccc:	4808      	ldr	r0, [pc, #32]	; (8002cf0 <siprintf+0x38>)
 8002cce:	4909      	ldr	r1, [pc, #36]	; (8002cf4 <siprintf+0x3c>)
 8002cd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8002cd4:	9105      	str	r1, [sp, #20]
 8002cd6:	6800      	ldr	r0, [r0, #0]
 8002cd8:	a902      	add	r1, sp, #8
 8002cda:	9301      	str	r3, [sp, #4]
 8002cdc:	f000 f866 	bl	8002dac <_svfiprintf_r>
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	9b02      	ldr	r3, [sp, #8]
 8002ce4:	701a      	strb	r2, [r3, #0]
 8002ce6:	b01c      	add	sp, #112	; 0x70
 8002ce8:	f85d eb04 	ldr.w	lr, [sp], #4
 8002cec:	b003      	add	sp, #12
 8002cee:	4770      	bx	lr
 8002cf0:	2000000c 	.word	0x2000000c
 8002cf4:	ffff0208 	.word	0xffff0208

08002cf8 <__ssputs_r>:
 8002cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002cfc:	688e      	ldr	r6, [r1, #8]
 8002cfe:	4682      	mov	sl, r0
 8002d00:	429e      	cmp	r6, r3
 8002d02:	460c      	mov	r4, r1
 8002d04:	4690      	mov	r8, r2
 8002d06:	4699      	mov	r9, r3
 8002d08:	d837      	bhi.n	8002d7a <__ssputs_r+0x82>
 8002d0a:	898a      	ldrh	r2, [r1, #12]
 8002d0c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002d10:	d031      	beq.n	8002d76 <__ssputs_r+0x7e>
 8002d12:	2302      	movs	r3, #2
 8002d14:	6825      	ldr	r5, [r4, #0]
 8002d16:	6909      	ldr	r1, [r1, #16]
 8002d18:	1a6f      	subs	r7, r5, r1
 8002d1a:	6965      	ldr	r5, [r4, #20]
 8002d1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002d20:	fb95 f5f3 	sdiv	r5, r5, r3
 8002d24:	f109 0301 	add.w	r3, r9, #1
 8002d28:	443b      	add	r3, r7
 8002d2a:	429d      	cmp	r5, r3
 8002d2c:	bf38      	it	cc
 8002d2e:	461d      	movcc	r5, r3
 8002d30:	0553      	lsls	r3, r2, #21
 8002d32:	d530      	bpl.n	8002d96 <__ssputs_r+0x9e>
 8002d34:	4629      	mov	r1, r5
 8002d36:	f000 fb37 	bl	80033a8 <_malloc_r>
 8002d3a:	4606      	mov	r6, r0
 8002d3c:	b950      	cbnz	r0, 8002d54 <__ssputs_r+0x5c>
 8002d3e:	230c      	movs	r3, #12
 8002d40:	f04f 30ff 	mov.w	r0, #4294967295
 8002d44:	f8ca 3000 	str.w	r3, [sl]
 8002d48:	89a3      	ldrh	r3, [r4, #12]
 8002d4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d4e:	81a3      	strh	r3, [r4, #12]
 8002d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d54:	463a      	mov	r2, r7
 8002d56:	6921      	ldr	r1, [r4, #16]
 8002d58:	f000 fab6 	bl	80032c8 <memcpy>
 8002d5c:	89a3      	ldrh	r3, [r4, #12]
 8002d5e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002d62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d66:	81a3      	strh	r3, [r4, #12]
 8002d68:	6126      	str	r6, [r4, #16]
 8002d6a:	443e      	add	r6, r7
 8002d6c:	6026      	str	r6, [r4, #0]
 8002d6e:	464e      	mov	r6, r9
 8002d70:	6165      	str	r5, [r4, #20]
 8002d72:	1bed      	subs	r5, r5, r7
 8002d74:	60a5      	str	r5, [r4, #8]
 8002d76:	454e      	cmp	r6, r9
 8002d78:	d900      	bls.n	8002d7c <__ssputs_r+0x84>
 8002d7a:	464e      	mov	r6, r9
 8002d7c:	4632      	mov	r2, r6
 8002d7e:	4641      	mov	r1, r8
 8002d80:	6820      	ldr	r0, [r4, #0]
 8002d82:	f000 faac 	bl	80032de <memmove>
 8002d86:	68a3      	ldr	r3, [r4, #8]
 8002d88:	2000      	movs	r0, #0
 8002d8a:	1b9b      	subs	r3, r3, r6
 8002d8c:	60a3      	str	r3, [r4, #8]
 8002d8e:	6823      	ldr	r3, [r4, #0]
 8002d90:	441e      	add	r6, r3
 8002d92:	6026      	str	r6, [r4, #0]
 8002d94:	e7dc      	b.n	8002d50 <__ssputs_r+0x58>
 8002d96:	462a      	mov	r2, r5
 8002d98:	f000 fb60 	bl	800345c <_realloc_r>
 8002d9c:	4606      	mov	r6, r0
 8002d9e:	2800      	cmp	r0, #0
 8002da0:	d1e2      	bne.n	8002d68 <__ssputs_r+0x70>
 8002da2:	6921      	ldr	r1, [r4, #16]
 8002da4:	4650      	mov	r0, sl
 8002da6:	f000 fab3 	bl	8003310 <_free_r>
 8002daa:	e7c8      	b.n	8002d3e <__ssputs_r+0x46>

08002dac <_svfiprintf_r>:
 8002dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002db0:	461d      	mov	r5, r3
 8002db2:	898b      	ldrh	r3, [r1, #12]
 8002db4:	b09d      	sub	sp, #116	; 0x74
 8002db6:	061f      	lsls	r7, r3, #24
 8002db8:	4680      	mov	r8, r0
 8002dba:	460c      	mov	r4, r1
 8002dbc:	4616      	mov	r6, r2
 8002dbe:	d50f      	bpl.n	8002de0 <_svfiprintf_r+0x34>
 8002dc0:	690b      	ldr	r3, [r1, #16]
 8002dc2:	b96b      	cbnz	r3, 8002de0 <_svfiprintf_r+0x34>
 8002dc4:	2140      	movs	r1, #64	; 0x40
 8002dc6:	f000 faef 	bl	80033a8 <_malloc_r>
 8002dca:	6020      	str	r0, [r4, #0]
 8002dcc:	6120      	str	r0, [r4, #16]
 8002dce:	b928      	cbnz	r0, 8002ddc <_svfiprintf_r+0x30>
 8002dd0:	230c      	movs	r3, #12
 8002dd2:	f8c8 3000 	str.w	r3, [r8]
 8002dd6:	f04f 30ff 	mov.w	r0, #4294967295
 8002dda:	e0c8      	b.n	8002f6e <_svfiprintf_r+0x1c2>
 8002ddc:	2340      	movs	r3, #64	; 0x40
 8002dde:	6163      	str	r3, [r4, #20]
 8002de0:	2300      	movs	r3, #0
 8002de2:	9309      	str	r3, [sp, #36]	; 0x24
 8002de4:	2320      	movs	r3, #32
 8002de6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002dea:	2330      	movs	r3, #48	; 0x30
 8002dec:	f04f 0b01 	mov.w	fp, #1
 8002df0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002df4:	9503      	str	r5, [sp, #12]
 8002df6:	4637      	mov	r7, r6
 8002df8:	463d      	mov	r5, r7
 8002dfa:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002dfe:	b10b      	cbz	r3, 8002e04 <_svfiprintf_r+0x58>
 8002e00:	2b25      	cmp	r3, #37	; 0x25
 8002e02:	d13e      	bne.n	8002e82 <_svfiprintf_r+0xd6>
 8002e04:	ebb7 0a06 	subs.w	sl, r7, r6
 8002e08:	d00b      	beq.n	8002e22 <_svfiprintf_r+0x76>
 8002e0a:	4653      	mov	r3, sl
 8002e0c:	4632      	mov	r2, r6
 8002e0e:	4621      	mov	r1, r4
 8002e10:	4640      	mov	r0, r8
 8002e12:	f7ff ff71 	bl	8002cf8 <__ssputs_r>
 8002e16:	3001      	adds	r0, #1
 8002e18:	f000 80a4 	beq.w	8002f64 <_svfiprintf_r+0x1b8>
 8002e1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e1e:	4453      	add	r3, sl
 8002e20:	9309      	str	r3, [sp, #36]	; 0x24
 8002e22:	783b      	ldrb	r3, [r7, #0]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f000 809d 	beq.w	8002f64 <_svfiprintf_r+0x1b8>
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002e34:	9304      	str	r3, [sp, #16]
 8002e36:	9307      	str	r3, [sp, #28]
 8002e38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002e3c:	931a      	str	r3, [sp, #104]	; 0x68
 8002e3e:	462f      	mov	r7, r5
 8002e40:	2205      	movs	r2, #5
 8002e42:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002e46:	4850      	ldr	r0, [pc, #320]	; (8002f88 <_svfiprintf_r+0x1dc>)
 8002e48:	f000 fa30 	bl	80032ac <memchr>
 8002e4c:	9b04      	ldr	r3, [sp, #16]
 8002e4e:	b9d0      	cbnz	r0, 8002e86 <_svfiprintf_r+0xda>
 8002e50:	06d9      	lsls	r1, r3, #27
 8002e52:	bf44      	itt	mi
 8002e54:	2220      	movmi	r2, #32
 8002e56:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002e5a:	071a      	lsls	r2, r3, #28
 8002e5c:	bf44      	itt	mi
 8002e5e:	222b      	movmi	r2, #43	; 0x2b
 8002e60:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002e64:	782a      	ldrb	r2, [r5, #0]
 8002e66:	2a2a      	cmp	r2, #42	; 0x2a
 8002e68:	d015      	beq.n	8002e96 <_svfiprintf_r+0xea>
 8002e6a:	462f      	mov	r7, r5
 8002e6c:	2000      	movs	r0, #0
 8002e6e:	250a      	movs	r5, #10
 8002e70:	9a07      	ldr	r2, [sp, #28]
 8002e72:	4639      	mov	r1, r7
 8002e74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002e78:	3b30      	subs	r3, #48	; 0x30
 8002e7a:	2b09      	cmp	r3, #9
 8002e7c:	d94d      	bls.n	8002f1a <_svfiprintf_r+0x16e>
 8002e7e:	b1b8      	cbz	r0, 8002eb0 <_svfiprintf_r+0x104>
 8002e80:	e00f      	b.n	8002ea2 <_svfiprintf_r+0xf6>
 8002e82:	462f      	mov	r7, r5
 8002e84:	e7b8      	b.n	8002df8 <_svfiprintf_r+0x4c>
 8002e86:	4a40      	ldr	r2, [pc, #256]	; (8002f88 <_svfiprintf_r+0x1dc>)
 8002e88:	463d      	mov	r5, r7
 8002e8a:	1a80      	subs	r0, r0, r2
 8002e8c:	fa0b f000 	lsl.w	r0, fp, r0
 8002e90:	4318      	orrs	r0, r3
 8002e92:	9004      	str	r0, [sp, #16]
 8002e94:	e7d3      	b.n	8002e3e <_svfiprintf_r+0x92>
 8002e96:	9a03      	ldr	r2, [sp, #12]
 8002e98:	1d11      	adds	r1, r2, #4
 8002e9a:	6812      	ldr	r2, [r2, #0]
 8002e9c:	9103      	str	r1, [sp, #12]
 8002e9e:	2a00      	cmp	r2, #0
 8002ea0:	db01      	blt.n	8002ea6 <_svfiprintf_r+0xfa>
 8002ea2:	9207      	str	r2, [sp, #28]
 8002ea4:	e004      	b.n	8002eb0 <_svfiprintf_r+0x104>
 8002ea6:	4252      	negs	r2, r2
 8002ea8:	f043 0302 	orr.w	r3, r3, #2
 8002eac:	9207      	str	r2, [sp, #28]
 8002eae:	9304      	str	r3, [sp, #16]
 8002eb0:	783b      	ldrb	r3, [r7, #0]
 8002eb2:	2b2e      	cmp	r3, #46	; 0x2e
 8002eb4:	d10c      	bne.n	8002ed0 <_svfiprintf_r+0x124>
 8002eb6:	787b      	ldrb	r3, [r7, #1]
 8002eb8:	2b2a      	cmp	r3, #42	; 0x2a
 8002eba:	d133      	bne.n	8002f24 <_svfiprintf_r+0x178>
 8002ebc:	9b03      	ldr	r3, [sp, #12]
 8002ebe:	3702      	adds	r7, #2
 8002ec0:	1d1a      	adds	r2, r3, #4
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	9203      	str	r2, [sp, #12]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	bfb8      	it	lt
 8002eca:	f04f 33ff 	movlt.w	r3, #4294967295
 8002ece:	9305      	str	r3, [sp, #20]
 8002ed0:	4d2e      	ldr	r5, [pc, #184]	; (8002f8c <_svfiprintf_r+0x1e0>)
 8002ed2:	2203      	movs	r2, #3
 8002ed4:	7839      	ldrb	r1, [r7, #0]
 8002ed6:	4628      	mov	r0, r5
 8002ed8:	f000 f9e8 	bl	80032ac <memchr>
 8002edc:	b138      	cbz	r0, 8002eee <_svfiprintf_r+0x142>
 8002ede:	2340      	movs	r3, #64	; 0x40
 8002ee0:	1b40      	subs	r0, r0, r5
 8002ee2:	fa03 f000 	lsl.w	r0, r3, r0
 8002ee6:	9b04      	ldr	r3, [sp, #16]
 8002ee8:	3701      	adds	r7, #1
 8002eea:	4303      	orrs	r3, r0
 8002eec:	9304      	str	r3, [sp, #16]
 8002eee:	7839      	ldrb	r1, [r7, #0]
 8002ef0:	2206      	movs	r2, #6
 8002ef2:	4827      	ldr	r0, [pc, #156]	; (8002f90 <_svfiprintf_r+0x1e4>)
 8002ef4:	1c7e      	adds	r6, r7, #1
 8002ef6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002efa:	f000 f9d7 	bl	80032ac <memchr>
 8002efe:	2800      	cmp	r0, #0
 8002f00:	d038      	beq.n	8002f74 <_svfiprintf_r+0x1c8>
 8002f02:	4b24      	ldr	r3, [pc, #144]	; (8002f94 <_svfiprintf_r+0x1e8>)
 8002f04:	bb13      	cbnz	r3, 8002f4c <_svfiprintf_r+0x1a0>
 8002f06:	9b03      	ldr	r3, [sp, #12]
 8002f08:	3307      	adds	r3, #7
 8002f0a:	f023 0307 	bic.w	r3, r3, #7
 8002f0e:	3308      	adds	r3, #8
 8002f10:	9303      	str	r3, [sp, #12]
 8002f12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f14:	444b      	add	r3, r9
 8002f16:	9309      	str	r3, [sp, #36]	; 0x24
 8002f18:	e76d      	b.n	8002df6 <_svfiprintf_r+0x4a>
 8002f1a:	fb05 3202 	mla	r2, r5, r2, r3
 8002f1e:	2001      	movs	r0, #1
 8002f20:	460f      	mov	r7, r1
 8002f22:	e7a6      	b.n	8002e72 <_svfiprintf_r+0xc6>
 8002f24:	2300      	movs	r3, #0
 8002f26:	250a      	movs	r5, #10
 8002f28:	4619      	mov	r1, r3
 8002f2a:	3701      	adds	r7, #1
 8002f2c:	9305      	str	r3, [sp, #20]
 8002f2e:	4638      	mov	r0, r7
 8002f30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002f34:	3a30      	subs	r2, #48	; 0x30
 8002f36:	2a09      	cmp	r2, #9
 8002f38:	d903      	bls.n	8002f42 <_svfiprintf_r+0x196>
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d0c8      	beq.n	8002ed0 <_svfiprintf_r+0x124>
 8002f3e:	9105      	str	r1, [sp, #20]
 8002f40:	e7c6      	b.n	8002ed0 <_svfiprintf_r+0x124>
 8002f42:	fb05 2101 	mla	r1, r5, r1, r2
 8002f46:	2301      	movs	r3, #1
 8002f48:	4607      	mov	r7, r0
 8002f4a:	e7f0      	b.n	8002f2e <_svfiprintf_r+0x182>
 8002f4c:	ab03      	add	r3, sp, #12
 8002f4e:	9300      	str	r3, [sp, #0]
 8002f50:	4622      	mov	r2, r4
 8002f52:	4b11      	ldr	r3, [pc, #68]	; (8002f98 <_svfiprintf_r+0x1ec>)
 8002f54:	a904      	add	r1, sp, #16
 8002f56:	4640      	mov	r0, r8
 8002f58:	f3af 8000 	nop.w
 8002f5c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002f60:	4681      	mov	r9, r0
 8002f62:	d1d6      	bne.n	8002f12 <_svfiprintf_r+0x166>
 8002f64:	89a3      	ldrh	r3, [r4, #12]
 8002f66:	065b      	lsls	r3, r3, #25
 8002f68:	f53f af35 	bmi.w	8002dd6 <_svfiprintf_r+0x2a>
 8002f6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002f6e:	b01d      	add	sp, #116	; 0x74
 8002f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f74:	ab03      	add	r3, sp, #12
 8002f76:	9300      	str	r3, [sp, #0]
 8002f78:	4622      	mov	r2, r4
 8002f7a:	4b07      	ldr	r3, [pc, #28]	; (8002f98 <_svfiprintf_r+0x1ec>)
 8002f7c:	a904      	add	r1, sp, #16
 8002f7e:	4640      	mov	r0, r8
 8002f80:	f000 f882 	bl	8003088 <_printf_i>
 8002f84:	e7ea      	b.n	8002f5c <_svfiprintf_r+0x1b0>
 8002f86:	bf00      	nop
 8002f88:	080035c4 	.word	0x080035c4
 8002f8c:	080035ca 	.word	0x080035ca
 8002f90:	080035ce 	.word	0x080035ce
 8002f94:	00000000 	.word	0x00000000
 8002f98:	08002cf9 	.word	0x08002cf9

08002f9c <_printf_common>:
 8002f9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fa0:	4691      	mov	r9, r2
 8002fa2:	461f      	mov	r7, r3
 8002fa4:	688a      	ldr	r2, [r1, #8]
 8002fa6:	690b      	ldr	r3, [r1, #16]
 8002fa8:	4606      	mov	r6, r0
 8002faa:	4293      	cmp	r3, r2
 8002fac:	bfb8      	it	lt
 8002fae:	4613      	movlt	r3, r2
 8002fb0:	f8c9 3000 	str.w	r3, [r9]
 8002fb4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002fb8:	460c      	mov	r4, r1
 8002fba:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002fbe:	b112      	cbz	r2, 8002fc6 <_printf_common+0x2a>
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	f8c9 3000 	str.w	r3, [r9]
 8002fc6:	6823      	ldr	r3, [r4, #0]
 8002fc8:	0699      	lsls	r1, r3, #26
 8002fca:	bf42      	ittt	mi
 8002fcc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002fd0:	3302      	addmi	r3, #2
 8002fd2:	f8c9 3000 	strmi.w	r3, [r9]
 8002fd6:	6825      	ldr	r5, [r4, #0]
 8002fd8:	f015 0506 	ands.w	r5, r5, #6
 8002fdc:	d107      	bne.n	8002fee <_printf_common+0x52>
 8002fde:	f104 0a19 	add.w	sl, r4, #25
 8002fe2:	68e3      	ldr	r3, [r4, #12]
 8002fe4:	f8d9 2000 	ldr.w	r2, [r9]
 8002fe8:	1a9b      	subs	r3, r3, r2
 8002fea:	42ab      	cmp	r3, r5
 8002fec:	dc29      	bgt.n	8003042 <_printf_common+0xa6>
 8002fee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002ff2:	6822      	ldr	r2, [r4, #0]
 8002ff4:	3300      	adds	r3, #0
 8002ff6:	bf18      	it	ne
 8002ff8:	2301      	movne	r3, #1
 8002ffa:	0692      	lsls	r2, r2, #26
 8002ffc:	d42e      	bmi.n	800305c <_printf_common+0xc0>
 8002ffe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003002:	4639      	mov	r1, r7
 8003004:	4630      	mov	r0, r6
 8003006:	47c0      	blx	r8
 8003008:	3001      	adds	r0, #1
 800300a:	d021      	beq.n	8003050 <_printf_common+0xb4>
 800300c:	6823      	ldr	r3, [r4, #0]
 800300e:	68e5      	ldr	r5, [r4, #12]
 8003010:	f003 0306 	and.w	r3, r3, #6
 8003014:	2b04      	cmp	r3, #4
 8003016:	bf18      	it	ne
 8003018:	2500      	movne	r5, #0
 800301a:	f8d9 2000 	ldr.w	r2, [r9]
 800301e:	f04f 0900 	mov.w	r9, #0
 8003022:	bf08      	it	eq
 8003024:	1aad      	subeq	r5, r5, r2
 8003026:	68a3      	ldr	r3, [r4, #8]
 8003028:	6922      	ldr	r2, [r4, #16]
 800302a:	bf08      	it	eq
 800302c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003030:	4293      	cmp	r3, r2
 8003032:	bfc4      	itt	gt
 8003034:	1a9b      	subgt	r3, r3, r2
 8003036:	18ed      	addgt	r5, r5, r3
 8003038:	341a      	adds	r4, #26
 800303a:	454d      	cmp	r5, r9
 800303c:	d11a      	bne.n	8003074 <_printf_common+0xd8>
 800303e:	2000      	movs	r0, #0
 8003040:	e008      	b.n	8003054 <_printf_common+0xb8>
 8003042:	2301      	movs	r3, #1
 8003044:	4652      	mov	r2, sl
 8003046:	4639      	mov	r1, r7
 8003048:	4630      	mov	r0, r6
 800304a:	47c0      	blx	r8
 800304c:	3001      	adds	r0, #1
 800304e:	d103      	bne.n	8003058 <_printf_common+0xbc>
 8003050:	f04f 30ff 	mov.w	r0, #4294967295
 8003054:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003058:	3501      	adds	r5, #1
 800305a:	e7c2      	b.n	8002fe2 <_printf_common+0x46>
 800305c:	2030      	movs	r0, #48	; 0x30
 800305e:	18e1      	adds	r1, r4, r3
 8003060:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003064:	1c5a      	adds	r2, r3, #1
 8003066:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800306a:	4422      	add	r2, r4
 800306c:	3302      	adds	r3, #2
 800306e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003072:	e7c4      	b.n	8002ffe <_printf_common+0x62>
 8003074:	2301      	movs	r3, #1
 8003076:	4622      	mov	r2, r4
 8003078:	4639      	mov	r1, r7
 800307a:	4630      	mov	r0, r6
 800307c:	47c0      	blx	r8
 800307e:	3001      	adds	r0, #1
 8003080:	d0e6      	beq.n	8003050 <_printf_common+0xb4>
 8003082:	f109 0901 	add.w	r9, r9, #1
 8003086:	e7d8      	b.n	800303a <_printf_common+0x9e>

08003088 <_printf_i>:
 8003088:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800308c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003090:	460c      	mov	r4, r1
 8003092:	7e09      	ldrb	r1, [r1, #24]
 8003094:	b085      	sub	sp, #20
 8003096:	296e      	cmp	r1, #110	; 0x6e
 8003098:	4617      	mov	r7, r2
 800309a:	4606      	mov	r6, r0
 800309c:	4698      	mov	r8, r3
 800309e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80030a0:	f000 80b3 	beq.w	800320a <_printf_i+0x182>
 80030a4:	d822      	bhi.n	80030ec <_printf_i+0x64>
 80030a6:	2963      	cmp	r1, #99	; 0x63
 80030a8:	d036      	beq.n	8003118 <_printf_i+0x90>
 80030aa:	d80a      	bhi.n	80030c2 <_printf_i+0x3a>
 80030ac:	2900      	cmp	r1, #0
 80030ae:	f000 80b9 	beq.w	8003224 <_printf_i+0x19c>
 80030b2:	2958      	cmp	r1, #88	; 0x58
 80030b4:	f000 8083 	beq.w	80031be <_printf_i+0x136>
 80030b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80030bc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80030c0:	e032      	b.n	8003128 <_printf_i+0xa0>
 80030c2:	2964      	cmp	r1, #100	; 0x64
 80030c4:	d001      	beq.n	80030ca <_printf_i+0x42>
 80030c6:	2969      	cmp	r1, #105	; 0x69
 80030c8:	d1f6      	bne.n	80030b8 <_printf_i+0x30>
 80030ca:	6820      	ldr	r0, [r4, #0]
 80030cc:	6813      	ldr	r3, [r2, #0]
 80030ce:	0605      	lsls	r5, r0, #24
 80030d0:	f103 0104 	add.w	r1, r3, #4
 80030d4:	d52a      	bpl.n	800312c <_printf_i+0xa4>
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	6011      	str	r1, [r2, #0]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	da03      	bge.n	80030e6 <_printf_i+0x5e>
 80030de:	222d      	movs	r2, #45	; 0x2d
 80030e0:	425b      	negs	r3, r3
 80030e2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80030e6:	486f      	ldr	r0, [pc, #444]	; (80032a4 <_printf_i+0x21c>)
 80030e8:	220a      	movs	r2, #10
 80030ea:	e039      	b.n	8003160 <_printf_i+0xd8>
 80030ec:	2973      	cmp	r1, #115	; 0x73
 80030ee:	f000 809d 	beq.w	800322c <_printf_i+0x1a4>
 80030f2:	d808      	bhi.n	8003106 <_printf_i+0x7e>
 80030f4:	296f      	cmp	r1, #111	; 0x6f
 80030f6:	d020      	beq.n	800313a <_printf_i+0xb2>
 80030f8:	2970      	cmp	r1, #112	; 0x70
 80030fa:	d1dd      	bne.n	80030b8 <_printf_i+0x30>
 80030fc:	6823      	ldr	r3, [r4, #0]
 80030fe:	f043 0320 	orr.w	r3, r3, #32
 8003102:	6023      	str	r3, [r4, #0]
 8003104:	e003      	b.n	800310e <_printf_i+0x86>
 8003106:	2975      	cmp	r1, #117	; 0x75
 8003108:	d017      	beq.n	800313a <_printf_i+0xb2>
 800310a:	2978      	cmp	r1, #120	; 0x78
 800310c:	d1d4      	bne.n	80030b8 <_printf_i+0x30>
 800310e:	2378      	movs	r3, #120	; 0x78
 8003110:	4865      	ldr	r0, [pc, #404]	; (80032a8 <_printf_i+0x220>)
 8003112:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003116:	e055      	b.n	80031c4 <_printf_i+0x13c>
 8003118:	6813      	ldr	r3, [r2, #0]
 800311a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800311e:	1d19      	adds	r1, r3, #4
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	6011      	str	r1, [r2, #0]
 8003124:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003128:	2301      	movs	r3, #1
 800312a:	e08c      	b.n	8003246 <_printf_i+0x1be>
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003132:	6011      	str	r1, [r2, #0]
 8003134:	bf18      	it	ne
 8003136:	b21b      	sxthne	r3, r3
 8003138:	e7cf      	b.n	80030da <_printf_i+0x52>
 800313a:	6813      	ldr	r3, [r2, #0]
 800313c:	6825      	ldr	r5, [r4, #0]
 800313e:	1d18      	adds	r0, r3, #4
 8003140:	6010      	str	r0, [r2, #0]
 8003142:	0628      	lsls	r0, r5, #24
 8003144:	d501      	bpl.n	800314a <_printf_i+0xc2>
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	e002      	b.n	8003150 <_printf_i+0xc8>
 800314a:	0668      	lsls	r0, r5, #25
 800314c:	d5fb      	bpl.n	8003146 <_printf_i+0xbe>
 800314e:	881b      	ldrh	r3, [r3, #0]
 8003150:	296f      	cmp	r1, #111	; 0x6f
 8003152:	bf14      	ite	ne
 8003154:	220a      	movne	r2, #10
 8003156:	2208      	moveq	r2, #8
 8003158:	4852      	ldr	r0, [pc, #328]	; (80032a4 <_printf_i+0x21c>)
 800315a:	2100      	movs	r1, #0
 800315c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003160:	6865      	ldr	r5, [r4, #4]
 8003162:	2d00      	cmp	r5, #0
 8003164:	60a5      	str	r5, [r4, #8]
 8003166:	f2c0 8095 	blt.w	8003294 <_printf_i+0x20c>
 800316a:	6821      	ldr	r1, [r4, #0]
 800316c:	f021 0104 	bic.w	r1, r1, #4
 8003170:	6021      	str	r1, [r4, #0]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d13d      	bne.n	80031f2 <_printf_i+0x16a>
 8003176:	2d00      	cmp	r5, #0
 8003178:	f040 808e 	bne.w	8003298 <_printf_i+0x210>
 800317c:	4665      	mov	r5, ip
 800317e:	2a08      	cmp	r2, #8
 8003180:	d10b      	bne.n	800319a <_printf_i+0x112>
 8003182:	6823      	ldr	r3, [r4, #0]
 8003184:	07db      	lsls	r3, r3, #31
 8003186:	d508      	bpl.n	800319a <_printf_i+0x112>
 8003188:	6923      	ldr	r3, [r4, #16]
 800318a:	6862      	ldr	r2, [r4, #4]
 800318c:	429a      	cmp	r2, r3
 800318e:	bfde      	ittt	le
 8003190:	2330      	movle	r3, #48	; 0x30
 8003192:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003196:	f105 35ff 	addle.w	r5, r5, #4294967295
 800319a:	ebac 0305 	sub.w	r3, ip, r5
 800319e:	6123      	str	r3, [r4, #16]
 80031a0:	f8cd 8000 	str.w	r8, [sp]
 80031a4:	463b      	mov	r3, r7
 80031a6:	aa03      	add	r2, sp, #12
 80031a8:	4621      	mov	r1, r4
 80031aa:	4630      	mov	r0, r6
 80031ac:	f7ff fef6 	bl	8002f9c <_printf_common>
 80031b0:	3001      	adds	r0, #1
 80031b2:	d14d      	bne.n	8003250 <_printf_i+0x1c8>
 80031b4:	f04f 30ff 	mov.w	r0, #4294967295
 80031b8:	b005      	add	sp, #20
 80031ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80031be:	4839      	ldr	r0, [pc, #228]	; (80032a4 <_printf_i+0x21c>)
 80031c0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80031c4:	6813      	ldr	r3, [r2, #0]
 80031c6:	6821      	ldr	r1, [r4, #0]
 80031c8:	1d1d      	adds	r5, r3, #4
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	6015      	str	r5, [r2, #0]
 80031ce:	060a      	lsls	r2, r1, #24
 80031d0:	d50b      	bpl.n	80031ea <_printf_i+0x162>
 80031d2:	07ca      	lsls	r2, r1, #31
 80031d4:	bf44      	itt	mi
 80031d6:	f041 0120 	orrmi.w	r1, r1, #32
 80031da:	6021      	strmi	r1, [r4, #0]
 80031dc:	b91b      	cbnz	r3, 80031e6 <_printf_i+0x15e>
 80031de:	6822      	ldr	r2, [r4, #0]
 80031e0:	f022 0220 	bic.w	r2, r2, #32
 80031e4:	6022      	str	r2, [r4, #0]
 80031e6:	2210      	movs	r2, #16
 80031e8:	e7b7      	b.n	800315a <_printf_i+0xd2>
 80031ea:	064d      	lsls	r5, r1, #25
 80031ec:	bf48      	it	mi
 80031ee:	b29b      	uxthmi	r3, r3
 80031f0:	e7ef      	b.n	80031d2 <_printf_i+0x14a>
 80031f2:	4665      	mov	r5, ip
 80031f4:	fbb3 f1f2 	udiv	r1, r3, r2
 80031f8:	fb02 3311 	mls	r3, r2, r1, r3
 80031fc:	5cc3      	ldrb	r3, [r0, r3]
 80031fe:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003202:	460b      	mov	r3, r1
 8003204:	2900      	cmp	r1, #0
 8003206:	d1f5      	bne.n	80031f4 <_printf_i+0x16c>
 8003208:	e7b9      	b.n	800317e <_printf_i+0xf6>
 800320a:	6813      	ldr	r3, [r2, #0]
 800320c:	6825      	ldr	r5, [r4, #0]
 800320e:	1d18      	adds	r0, r3, #4
 8003210:	6961      	ldr	r1, [r4, #20]
 8003212:	6010      	str	r0, [r2, #0]
 8003214:	0628      	lsls	r0, r5, #24
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	d501      	bpl.n	800321e <_printf_i+0x196>
 800321a:	6019      	str	r1, [r3, #0]
 800321c:	e002      	b.n	8003224 <_printf_i+0x19c>
 800321e:	066a      	lsls	r2, r5, #25
 8003220:	d5fb      	bpl.n	800321a <_printf_i+0x192>
 8003222:	8019      	strh	r1, [r3, #0]
 8003224:	2300      	movs	r3, #0
 8003226:	4665      	mov	r5, ip
 8003228:	6123      	str	r3, [r4, #16]
 800322a:	e7b9      	b.n	80031a0 <_printf_i+0x118>
 800322c:	6813      	ldr	r3, [r2, #0]
 800322e:	1d19      	adds	r1, r3, #4
 8003230:	6011      	str	r1, [r2, #0]
 8003232:	681d      	ldr	r5, [r3, #0]
 8003234:	6862      	ldr	r2, [r4, #4]
 8003236:	2100      	movs	r1, #0
 8003238:	4628      	mov	r0, r5
 800323a:	f000 f837 	bl	80032ac <memchr>
 800323e:	b108      	cbz	r0, 8003244 <_printf_i+0x1bc>
 8003240:	1b40      	subs	r0, r0, r5
 8003242:	6060      	str	r0, [r4, #4]
 8003244:	6863      	ldr	r3, [r4, #4]
 8003246:	6123      	str	r3, [r4, #16]
 8003248:	2300      	movs	r3, #0
 800324a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800324e:	e7a7      	b.n	80031a0 <_printf_i+0x118>
 8003250:	6923      	ldr	r3, [r4, #16]
 8003252:	462a      	mov	r2, r5
 8003254:	4639      	mov	r1, r7
 8003256:	4630      	mov	r0, r6
 8003258:	47c0      	blx	r8
 800325a:	3001      	adds	r0, #1
 800325c:	d0aa      	beq.n	80031b4 <_printf_i+0x12c>
 800325e:	6823      	ldr	r3, [r4, #0]
 8003260:	079b      	lsls	r3, r3, #30
 8003262:	d413      	bmi.n	800328c <_printf_i+0x204>
 8003264:	68e0      	ldr	r0, [r4, #12]
 8003266:	9b03      	ldr	r3, [sp, #12]
 8003268:	4298      	cmp	r0, r3
 800326a:	bfb8      	it	lt
 800326c:	4618      	movlt	r0, r3
 800326e:	e7a3      	b.n	80031b8 <_printf_i+0x130>
 8003270:	2301      	movs	r3, #1
 8003272:	464a      	mov	r2, r9
 8003274:	4639      	mov	r1, r7
 8003276:	4630      	mov	r0, r6
 8003278:	47c0      	blx	r8
 800327a:	3001      	adds	r0, #1
 800327c:	d09a      	beq.n	80031b4 <_printf_i+0x12c>
 800327e:	3501      	adds	r5, #1
 8003280:	68e3      	ldr	r3, [r4, #12]
 8003282:	9a03      	ldr	r2, [sp, #12]
 8003284:	1a9b      	subs	r3, r3, r2
 8003286:	42ab      	cmp	r3, r5
 8003288:	dcf2      	bgt.n	8003270 <_printf_i+0x1e8>
 800328a:	e7eb      	b.n	8003264 <_printf_i+0x1dc>
 800328c:	2500      	movs	r5, #0
 800328e:	f104 0919 	add.w	r9, r4, #25
 8003292:	e7f5      	b.n	8003280 <_printf_i+0x1f8>
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1ac      	bne.n	80031f2 <_printf_i+0x16a>
 8003298:	7803      	ldrb	r3, [r0, #0]
 800329a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800329e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80032a2:	e76c      	b.n	800317e <_printf_i+0xf6>
 80032a4:	080035d5 	.word	0x080035d5
 80032a8:	080035e6 	.word	0x080035e6

080032ac <memchr>:
 80032ac:	b510      	push	{r4, lr}
 80032ae:	b2c9      	uxtb	r1, r1
 80032b0:	4402      	add	r2, r0
 80032b2:	4290      	cmp	r0, r2
 80032b4:	4603      	mov	r3, r0
 80032b6:	d101      	bne.n	80032bc <memchr+0x10>
 80032b8:	2300      	movs	r3, #0
 80032ba:	e003      	b.n	80032c4 <memchr+0x18>
 80032bc:	781c      	ldrb	r4, [r3, #0]
 80032be:	3001      	adds	r0, #1
 80032c0:	428c      	cmp	r4, r1
 80032c2:	d1f6      	bne.n	80032b2 <memchr+0x6>
 80032c4:	4618      	mov	r0, r3
 80032c6:	bd10      	pop	{r4, pc}

080032c8 <memcpy>:
 80032c8:	b510      	push	{r4, lr}
 80032ca:	1e43      	subs	r3, r0, #1
 80032cc:	440a      	add	r2, r1
 80032ce:	4291      	cmp	r1, r2
 80032d0:	d100      	bne.n	80032d4 <memcpy+0xc>
 80032d2:	bd10      	pop	{r4, pc}
 80032d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80032d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80032dc:	e7f7      	b.n	80032ce <memcpy+0x6>

080032de <memmove>:
 80032de:	4288      	cmp	r0, r1
 80032e0:	b510      	push	{r4, lr}
 80032e2:	eb01 0302 	add.w	r3, r1, r2
 80032e6:	d807      	bhi.n	80032f8 <memmove+0x1a>
 80032e8:	1e42      	subs	r2, r0, #1
 80032ea:	4299      	cmp	r1, r3
 80032ec:	d00a      	beq.n	8003304 <memmove+0x26>
 80032ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80032f2:	f802 4f01 	strb.w	r4, [r2, #1]!
 80032f6:	e7f8      	b.n	80032ea <memmove+0xc>
 80032f8:	4283      	cmp	r3, r0
 80032fa:	d9f5      	bls.n	80032e8 <memmove+0xa>
 80032fc:	1881      	adds	r1, r0, r2
 80032fe:	1ad2      	subs	r2, r2, r3
 8003300:	42d3      	cmn	r3, r2
 8003302:	d100      	bne.n	8003306 <memmove+0x28>
 8003304:	bd10      	pop	{r4, pc}
 8003306:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800330a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800330e:	e7f7      	b.n	8003300 <memmove+0x22>

08003310 <_free_r>:
 8003310:	b538      	push	{r3, r4, r5, lr}
 8003312:	4605      	mov	r5, r0
 8003314:	2900      	cmp	r1, #0
 8003316:	d043      	beq.n	80033a0 <_free_r+0x90>
 8003318:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800331c:	1f0c      	subs	r4, r1, #4
 800331e:	2b00      	cmp	r3, #0
 8003320:	bfb8      	it	lt
 8003322:	18e4      	addlt	r4, r4, r3
 8003324:	f000 f8d0 	bl	80034c8 <__malloc_lock>
 8003328:	4a1e      	ldr	r2, [pc, #120]	; (80033a4 <_free_r+0x94>)
 800332a:	6813      	ldr	r3, [r2, #0]
 800332c:	4610      	mov	r0, r2
 800332e:	b933      	cbnz	r3, 800333e <_free_r+0x2e>
 8003330:	6063      	str	r3, [r4, #4]
 8003332:	6014      	str	r4, [r2, #0]
 8003334:	4628      	mov	r0, r5
 8003336:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800333a:	f000 b8c6 	b.w	80034ca <__malloc_unlock>
 800333e:	42a3      	cmp	r3, r4
 8003340:	d90b      	bls.n	800335a <_free_r+0x4a>
 8003342:	6821      	ldr	r1, [r4, #0]
 8003344:	1862      	adds	r2, r4, r1
 8003346:	4293      	cmp	r3, r2
 8003348:	bf01      	itttt	eq
 800334a:	681a      	ldreq	r2, [r3, #0]
 800334c:	685b      	ldreq	r3, [r3, #4]
 800334e:	1852      	addeq	r2, r2, r1
 8003350:	6022      	streq	r2, [r4, #0]
 8003352:	6063      	str	r3, [r4, #4]
 8003354:	6004      	str	r4, [r0, #0]
 8003356:	e7ed      	b.n	8003334 <_free_r+0x24>
 8003358:	4613      	mov	r3, r2
 800335a:	685a      	ldr	r2, [r3, #4]
 800335c:	b10a      	cbz	r2, 8003362 <_free_r+0x52>
 800335e:	42a2      	cmp	r2, r4
 8003360:	d9fa      	bls.n	8003358 <_free_r+0x48>
 8003362:	6819      	ldr	r1, [r3, #0]
 8003364:	1858      	adds	r0, r3, r1
 8003366:	42a0      	cmp	r0, r4
 8003368:	d10b      	bne.n	8003382 <_free_r+0x72>
 800336a:	6820      	ldr	r0, [r4, #0]
 800336c:	4401      	add	r1, r0
 800336e:	1858      	adds	r0, r3, r1
 8003370:	4282      	cmp	r2, r0
 8003372:	6019      	str	r1, [r3, #0]
 8003374:	d1de      	bne.n	8003334 <_free_r+0x24>
 8003376:	6810      	ldr	r0, [r2, #0]
 8003378:	6852      	ldr	r2, [r2, #4]
 800337a:	4401      	add	r1, r0
 800337c:	6019      	str	r1, [r3, #0]
 800337e:	605a      	str	r2, [r3, #4]
 8003380:	e7d8      	b.n	8003334 <_free_r+0x24>
 8003382:	d902      	bls.n	800338a <_free_r+0x7a>
 8003384:	230c      	movs	r3, #12
 8003386:	602b      	str	r3, [r5, #0]
 8003388:	e7d4      	b.n	8003334 <_free_r+0x24>
 800338a:	6820      	ldr	r0, [r4, #0]
 800338c:	1821      	adds	r1, r4, r0
 800338e:	428a      	cmp	r2, r1
 8003390:	bf01      	itttt	eq
 8003392:	6811      	ldreq	r1, [r2, #0]
 8003394:	6852      	ldreq	r2, [r2, #4]
 8003396:	1809      	addeq	r1, r1, r0
 8003398:	6021      	streq	r1, [r4, #0]
 800339a:	6062      	str	r2, [r4, #4]
 800339c:	605c      	str	r4, [r3, #4]
 800339e:	e7c9      	b.n	8003334 <_free_r+0x24>
 80033a0:	bd38      	pop	{r3, r4, r5, pc}
 80033a2:	bf00      	nop
 80033a4:	20000090 	.word	0x20000090

080033a8 <_malloc_r>:
 80033a8:	b570      	push	{r4, r5, r6, lr}
 80033aa:	1ccd      	adds	r5, r1, #3
 80033ac:	f025 0503 	bic.w	r5, r5, #3
 80033b0:	3508      	adds	r5, #8
 80033b2:	2d0c      	cmp	r5, #12
 80033b4:	bf38      	it	cc
 80033b6:	250c      	movcc	r5, #12
 80033b8:	2d00      	cmp	r5, #0
 80033ba:	4606      	mov	r6, r0
 80033bc:	db01      	blt.n	80033c2 <_malloc_r+0x1a>
 80033be:	42a9      	cmp	r1, r5
 80033c0:	d903      	bls.n	80033ca <_malloc_r+0x22>
 80033c2:	230c      	movs	r3, #12
 80033c4:	6033      	str	r3, [r6, #0]
 80033c6:	2000      	movs	r0, #0
 80033c8:	bd70      	pop	{r4, r5, r6, pc}
 80033ca:	f000 f87d 	bl	80034c8 <__malloc_lock>
 80033ce:	4a21      	ldr	r2, [pc, #132]	; (8003454 <_malloc_r+0xac>)
 80033d0:	6814      	ldr	r4, [r2, #0]
 80033d2:	4621      	mov	r1, r4
 80033d4:	b991      	cbnz	r1, 80033fc <_malloc_r+0x54>
 80033d6:	4c20      	ldr	r4, [pc, #128]	; (8003458 <_malloc_r+0xb0>)
 80033d8:	6823      	ldr	r3, [r4, #0]
 80033da:	b91b      	cbnz	r3, 80033e4 <_malloc_r+0x3c>
 80033dc:	4630      	mov	r0, r6
 80033de:	f000 f863 	bl	80034a8 <_sbrk_r>
 80033e2:	6020      	str	r0, [r4, #0]
 80033e4:	4629      	mov	r1, r5
 80033e6:	4630      	mov	r0, r6
 80033e8:	f000 f85e 	bl	80034a8 <_sbrk_r>
 80033ec:	1c43      	adds	r3, r0, #1
 80033ee:	d124      	bne.n	800343a <_malloc_r+0x92>
 80033f0:	230c      	movs	r3, #12
 80033f2:	4630      	mov	r0, r6
 80033f4:	6033      	str	r3, [r6, #0]
 80033f6:	f000 f868 	bl	80034ca <__malloc_unlock>
 80033fa:	e7e4      	b.n	80033c6 <_malloc_r+0x1e>
 80033fc:	680b      	ldr	r3, [r1, #0]
 80033fe:	1b5b      	subs	r3, r3, r5
 8003400:	d418      	bmi.n	8003434 <_malloc_r+0x8c>
 8003402:	2b0b      	cmp	r3, #11
 8003404:	d90f      	bls.n	8003426 <_malloc_r+0x7e>
 8003406:	600b      	str	r3, [r1, #0]
 8003408:	18cc      	adds	r4, r1, r3
 800340a:	50cd      	str	r5, [r1, r3]
 800340c:	4630      	mov	r0, r6
 800340e:	f000 f85c 	bl	80034ca <__malloc_unlock>
 8003412:	f104 000b 	add.w	r0, r4, #11
 8003416:	1d23      	adds	r3, r4, #4
 8003418:	f020 0007 	bic.w	r0, r0, #7
 800341c:	1ac3      	subs	r3, r0, r3
 800341e:	d0d3      	beq.n	80033c8 <_malloc_r+0x20>
 8003420:	425a      	negs	r2, r3
 8003422:	50e2      	str	r2, [r4, r3]
 8003424:	e7d0      	b.n	80033c8 <_malloc_r+0x20>
 8003426:	684b      	ldr	r3, [r1, #4]
 8003428:	428c      	cmp	r4, r1
 800342a:	bf16      	itet	ne
 800342c:	6063      	strne	r3, [r4, #4]
 800342e:	6013      	streq	r3, [r2, #0]
 8003430:	460c      	movne	r4, r1
 8003432:	e7eb      	b.n	800340c <_malloc_r+0x64>
 8003434:	460c      	mov	r4, r1
 8003436:	6849      	ldr	r1, [r1, #4]
 8003438:	e7cc      	b.n	80033d4 <_malloc_r+0x2c>
 800343a:	1cc4      	adds	r4, r0, #3
 800343c:	f024 0403 	bic.w	r4, r4, #3
 8003440:	42a0      	cmp	r0, r4
 8003442:	d005      	beq.n	8003450 <_malloc_r+0xa8>
 8003444:	1a21      	subs	r1, r4, r0
 8003446:	4630      	mov	r0, r6
 8003448:	f000 f82e 	bl	80034a8 <_sbrk_r>
 800344c:	3001      	adds	r0, #1
 800344e:	d0cf      	beq.n	80033f0 <_malloc_r+0x48>
 8003450:	6025      	str	r5, [r4, #0]
 8003452:	e7db      	b.n	800340c <_malloc_r+0x64>
 8003454:	20000090 	.word	0x20000090
 8003458:	20000094 	.word	0x20000094

0800345c <_realloc_r>:
 800345c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800345e:	4607      	mov	r7, r0
 8003460:	4614      	mov	r4, r2
 8003462:	460e      	mov	r6, r1
 8003464:	b921      	cbnz	r1, 8003470 <_realloc_r+0x14>
 8003466:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800346a:	4611      	mov	r1, r2
 800346c:	f7ff bf9c 	b.w	80033a8 <_malloc_r>
 8003470:	b922      	cbnz	r2, 800347c <_realloc_r+0x20>
 8003472:	f7ff ff4d 	bl	8003310 <_free_r>
 8003476:	4625      	mov	r5, r4
 8003478:	4628      	mov	r0, r5
 800347a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800347c:	f000 f826 	bl	80034cc <_malloc_usable_size_r>
 8003480:	42a0      	cmp	r0, r4
 8003482:	d20f      	bcs.n	80034a4 <_realloc_r+0x48>
 8003484:	4621      	mov	r1, r4
 8003486:	4638      	mov	r0, r7
 8003488:	f7ff ff8e 	bl	80033a8 <_malloc_r>
 800348c:	4605      	mov	r5, r0
 800348e:	2800      	cmp	r0, #0
 8003490:	d0f2      	beq.n	8003478 <_realloc_r+0x1c>
 8003492:	4631      	mov	r1, r6
 8003494:	4622      	mov	r2, r4
 8003496:	f7ff ff17 	bl	80032c8 <memcpy>
 800349a:	4631      	mov	r1, r6
 800349c:	4638      	mov	r0, r7
 800349e:	f7ff ff37 	bl	8003310 <_free_r>
 80034a2:	e7e9      	b.n	8003478 <_realloc_r+0x1c>
 80034a4:	4635      	mov	r5, r6
 80034a6:	e7e7      	b.n	8003478 <_realloc_r+0x1c>

080034a8 <_sbrk_r>:
 80034a8:	b538      	push	{r3, r4, r5, lr}
 80034aa:	2300      	movs	r3, #0
 80034ac:	4c05      	ldr	r4, [pc, #20]	; (80034c4 <_sbrk_r+0x1c>)
 80034ae:	4605      	mov	r5, r0
 80034b0:	4608      	mov	r0, r1
 80034b2:	6023      	str	r3, [r4, #0]
 80034b4:	f7fd fbd2 	bl	8000c5c <_sbrk>
 80034b8:	1c43      	adds	r3, r0, #1
 80034ba:	d102      	bne.n	80034c2 <_sbrk_r+0x1a>
 80034bc:	6823      	ldr	r3, [r4, #0]
 80034be:	b103      	cbz	r3, 80034c2 <_sbrk_r+0x1a>
 80034c0:	602b      	str	r3, [r5, #0]
 80034c2:	bd38      	pop	{r3, r4, r5, pc}
 80034c4:	20000120 	.word	0x20000120

080034c8 <__malloc_lock>:
 80034c8:	4770      	bx	lr

080034ca <__malloc_unlock>:
 80034ca:	4770      	bx	lr

080034cc <_malloc_usable_size_r>:
 80034cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80034d0:	1f18      	subs	r0, r3, #4
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	bfbc      	itt	lt
 80034d6:	580b      	ldrlt	r3, [r1, r0]
 80034d8:	18c0      	addlt	r0, r0, r3
 80034da:	4770      	bx	lr

080034dc <_init>:
 80034dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034de:	bf00      	nop
 80034e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034e2:	bc08      	pop	{r3}
 80034e4:	469e      	mov	lr, r3
 80034e6:	4770      	bx	lr

080034e8 <_fini>:
 80034e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ea:	bf00      	nop
 80034ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034ee:	bc08      	pop	{r3}
 80034f0:	469e      	mov	lr, r3
 80034f2:	4770      	bx	lr
